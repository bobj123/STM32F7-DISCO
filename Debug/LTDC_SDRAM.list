
LTDC_SDRAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c54  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001e1c  08001e1c  00011e1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001e2c  08001e2c  00011e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001e34  08001e34  00011e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001e38  08001e38  00011e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0003fc10  20000000  08001e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000118  2003fc10  08041a4c  0005fc10  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2003fd28  08041a4c  0005fd28  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0005fc10  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a275  00000000  00000000  0005fc40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001b3c  00000000  00000000  00069eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003ba6  00000000  00000000  0006b9f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000710  00000000  00000000  0006f598  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000990  00000000  00000000  0006fca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003e0b  00000000  00000000  00070638  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000314f  00000000  00000000  00074443  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00077592  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000011f8  00000000  00000000  00077610  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2003fc10 	.word	0x2003fc10
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08001e04 	.word	0x08001e04

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2003fc14 	.word	0x2003fc14
 8000204:	08001e04 	.word	0x08001e04

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b97a 	b.w	8000514 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	468c      	mov	ip, r1
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	9e08      	ldr	r6, [sp, #32]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d151      	bne.n	80002ec <__udivmoddi4+0xb4>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d96d      	bls.n	800032a <__udivmoddi4+0xf2>
 800024e:	fab2 fe82 	clz	lr, r2
 8000252:	f1be 0f00 	cmp.w	lr, #0
 8000256:	d00b      	beq.n	8000270 <__udivmoddi4+0x38>
 8000258:	f1ce 0c20 	rsb	ip, lr, #32
 800025c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000260:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000264:	fa02 f70e 	lsl.w	r7, r2, lr
 8000268:	ea4c 0c05 	orr.w	ip, ip, r5
 800026c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000270:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000274:	0c25      	lsrs	r5, r4, #16
 8000276:	fbbc f8fa 	udiv	r8, ip, sl
 800027a:	fa1f f987 	uxth.w	r9, r7
 800027e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000282:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000286:	fb08 f309 	mul.w	r3, r8, r9
 800028a:	42ab      	cmp	r3, r5
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x6c>
 800028e:	19ed      	adds	r5, r5, r7
 8000290:	f108 32ff 	add.w	r2, r8, #4294967295
 8000294:	f080 8123 	bcs.w	80004de <__udivmoddi4+0x2a6>
 8000298:	42ab      	cmp	r3, r5
 800029a:	f240 8120 	bls.w	80004de <__udivmoddi4+0x2a6>
 800029e:	f1a8 0802 	sub.w	r8, r8, #2
 80002a2:	443d      	add	r5, r7
 80002a4:	1aed      	subs	r5, r5, r3
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002ac:	fb0a 5510 	mls	r5, sl, r0, r5
 80002b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b4:	fb00 f909 	mul.w	r9, r0, r9
 80002b8:	45a1      	cmp	r9, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x98>
 80002bc:	19e4      	adds	r4, r4, r7
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 810a 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80002c6:	45a1      	cmp	r9, r4
 80002c8:	f240 8107 	bls.w	80004da <__udivmoddi4+0x2a2>
 80002cc:	3802      	subs	r0, #2
 80002ce:	443c      	add	r4, r7
 80002d0:	eba4 0409 	sub.w	r4, r4, r9
 80002d4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d8:	2100      	movs	r1, #0
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d061      	beq.n	80003a2 <__udivmoddi4+0x16a>
 80002de:	fa24 f40e 	lsr.w	r4, r4, lr
 80002e2:	2300      	movs	r3, #0
 80002e4:	6034      	str	r4, [r6, #0]
 80002e6:	6073      	str	r3, [r6, #4]
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xc8>
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d054      	beq.n	800039e <__udivmoddi4+0x166>
 80002f4:	2100      	movs	r1, #0
 80002f6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002fa:	4608      	mov	r0, r1
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	fab3 f183 	clz	r1, r3
 8000304:	2900      	cmp	r1, #0
 8000306:	f040 808e 	bne.w	8000426 <__udivmoddi4+0x1ee>
 800030a:	42ab      	cmp	r3, r5
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xdc>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2d0>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb65 0503 	sbc.w	r5, r5, r3
 800031a:	2001      	movs	r0, #1
 800031c:	46ac      	mov	ip, r5
 800031e:	2e00      	cmp	r6, #0
 8000320:	d03f      	beq.n	80003a2 <__udivmoddi4+0x16a>
 8000322:	e886 1010 	stmia.w	r6, {r4, ip}
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	b912      	cbnz	r2, 8000332 <__udivmoddi4+0xfa>
 800032c:	2701      	movs	r7, #1
 800032e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000332:	fab7 fe87 	clz	lr, r7
 8000336:	f1be 0f00 	cmp.w	lr, #0
 800033a:	d134      	bne.n	80003a6 <__udivmoddi4+0x16e>
 800033c:	1beb      	subs	r3, r5, r7
 800033e:	0c3a      	lsrs	r2, r7, #16
 8000340:	fa1f fc87 	uxth.w	ip, r7
 8000344:	2101      	movs	r1, #1
 8000346:	fbb3 f8f2 	udiv	r8, r3, r2
 800034a:	0c25      	lsrs	r5, r4, #16
 800034c:	fb02 3318 	mls	r3, r2, r8, r3
 8000350:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000354:	fb0c f308 	mul.w	r3, ip, r8
 8000358:	42ab      	cmp	r3, r5
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x134>
 800035c:	19ed      	adds	r5, r5, r7
 800035e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x132>
 8000364:	42ab      	cmp	r3, r5
 8000366:	f200 80d1 	bhi.w	800050c <__udivmoddi4+0x2d4>
 800036a:	4680      	mov	r8, r0
 800036c:	1aed      	subs	r5, r5, r3
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb5 f0f2 	udiv	r0, r5, r2
 8000374:	fb02 5510 	mls	r5, r2, r0, r5
 8000378:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800037c:	fb0c fc00 	mul.w	ip, ip, r0
 8000380:	45a4      	cmp	ip, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x15c>
 8000384:	19e4      	adds	r4, r4, r7
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x15a>
 800038c:	45a4      	cmp	ip, r4
 800038e:	f200 80b8 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 040c 	sub.w	r4, r4, ip
 8000398:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800039c:	e79d      	b.n	80002da <__udivmoddi4+0xa2>
 800039e:	4631      	mov	r1, r6
 80003a0:	4630      	mov	r0, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	f1ce 0420 	rsb	r4, lr, #32
 80003aa:	fa05 f30e 	lsl.w	r3, r5, lr
 80003ae:	fa07 f70e 	lsl.w	r7, r7, lr
 80003b2:	fa20 f804 	lsr.w	r8, r0, r4
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa25 f404 	lsr.w	r4, r5, r4
 80003bc:	ea48 0803 	orr.w	r8, r8, r3
 80003c0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c8:	fb02 4411 	mls	r4, r2, r1, r4
 80003cc:	fa1f fc87 	uxth.w	ip, r7
 80003d0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d4:	fb01 f30c 	mul.w	r3, r1, ip
 80003d8:	42ab      	cmp	r3, r5
 80003da:	fa00 f40e 	lsl.w	r4, r0, lr
 80003de:	d909      	bls.n	80003f4 <__udivmoddi4+0x1bc>
 80003e0:	19ed      	adds	r5, r5, r7
 80003e2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e6:	f080 808a 	bcs.w	80004fe <__udivmoddi4+0x2c6>
 80003ea:	42ab      	cmp	r3, r5
 80003ec:	f240 8087 	bls.w	80004fe <__udivmoddi4+0x2c6>
 80003f0:	3902      	subs	r1, #2
 80003f2:	443d      	add	r5, r7
 80003f4:	1aeb      	subs	r3, r5, r3
 80003f6:	fa1f f588 	uxth.w	r5, r8
 80003fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fe:	fb02 3310 	mls	r3, r2, r0, r3
 8000402:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000406:	fb00 f30c 	mul.w	r3, r0, ip
 800040a:	42ab      	cmp	r3, r5
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x1e6>
 800040e:	19ed      	adds	r5, r5, r7
 8000410:	f100 38ff 	add.w	r8, r0, #4294967295
 8000414:	d26f      	bcs.n	80004f6 <__udivmoddi4+0x2be>
 8000416:	42ab      	cmp	r3, r5
 8000418:	d96d      	bls.n	80004f6 <__udivmoddi4+0x2be>
 800041a:	3802      	subs	r0, #2
 800041c:	443d      	add	r5, r7
 800041e:	1aeb      	subs	r3, r5, r3
 8000420:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000424:	e78f      	b.n	8000346 <__udivmoddi4+0x10e>
 8000426:	f1c1 0720 	rsb	r7, r1, #32
 800042a:	fa22 f807 	lsr.w	r8, r2, r7
 800042e:	408b      	lsls	r3, r1
 8000430:	fa05 f401 	lsl.w	r4, r5, r1
 8000434:	ea48 0303 	orr.w	r3, r8, r3
 8000438:	fa20 fe07 	lsr.w	lr, r0, r7
 800043c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000440:	40fd      	lsrs	r5, r7
 8000442:	ea4e 0e04 	orr.w	lr, lr, r4
 8000446:	fbb5 f9fc 	udiv	r9, r5, ip
 800044a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000452:	fa1f f883 	uxth.w	r8, r3
 8000456:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800045a:	fb09 f408 	mul.w	r4, r9, r8
 800045e:	42ac      	cmp	r4, r5
 8000460:	fa02 f201 	lsl.w	r2, r2, r1
 8000464:	fa00 fa01 	lsl.w	sl, r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x244>
 800046a:	18ed      	adds	r5, r5, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	d243      	bcs.n	80004fa <__udivmoddi4+0x2c2>
 8000472:	42ac      	cmp	r4, r5
 8000474:	d941      	bls.n	80004fa <__udivmoddi4+0x2c2>
 8000476:	f1a9 0902 	sub.w	r9, r9, #2
 800047a:	441d      	add	r5, r3
 800047c:	1b2d      	subs	r5, r5, r4
 800047e:	fa1f fe8e 	uxth.w	lr, lr
 8000482:	fbb5 f0fc 	udiv	r0, r5, ip
 8000486:	fb0c 5510 	mls	r5, ip, r0, r5
 800048a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048e:	fb00 f808 	mul.w	r8, r0, r8
 8000492:	45a0      	cmp	r8, r4
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x26e>
 8000496:	18e4      	adds	r4, r4, r3
 8000498:	f100 35ff 	add.w	r5, r0, #4294967295
 800049c:	d229      	bcs.n	80004f2 <__udivmoddi4+0x2ba>
 800049e:	45a0      	cmp	r8, r4
 80004a0:	d927      	bls.n	80004f2 <__udivmoddi4+0x2ba>
 80004a2:	3802      	subs	r0, #2
 80004a4:	441c      	add	r4, r3
 80004a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004aa:	eba4 0408 	sub.w	r4, r4, r8
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	454c      	cmp	r4, r9
 80004b4:	46c6      	mov	lr, r8
 80004b6:	464d      	mov	r5, r9
 80004b8:	d315      	bcc.n	80004e6 <__udivmoddi4+0x2ae>
 80004ba:	d012      	beq.n	80004e2 <__udivmoddi4+0x2aa>
 80004bc:	b156      	cbz	r6, 80004d4 <__udivmoddi4+0x29c>
 80004be:	ebba 030e 	subs.w	r3, sl, lr
 80004c2:	eb64 0405 	sbc.w	r4, r4, r5
 80004c6:	fa04 f707 	lsl.w	r7, r4, r7
 80004ca:	40cb      	lsrs	r3, r1
 80004cc:	431f      	orrs	r7, r3
 80004ce:	40cc      	lsrs	r4, r1
 80004d0:	6037      	str	r7, [r6, #0]
 80004d2:	6074      	str	r4, [r6, #4]
 80004d4:	2100      	movs	r1, #0
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	4618      	mov	r0, r3
 80004dc:	e6f8      	b.n	80002d0 <__udivmoddi4+0x98>
 80004de:	4690      	mov	r8, r2
 80004e0:	e6e0      	b.n	80002a4 <__udivmoddi4+0x6c>
 80004e2:	45c2      	cmp	sl, r8
 80004e4:	d2ea      	bcs.n	80004bc <__udivmoddi4+0x284>
 80004e6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ea:	eb69 0503 	sbc.w	r5, r9, r3
 80004ee:	3801      	subs	r0, #1
 80004f0:	e7e4      	b.n	80004bc <__udivmoddi4+0x284>
 80004f2:	4628      	mov	r0, r5
 80004f4:	e7d7      	b.n	80004a6 <__udivmoddi4+0x26e>
 80004f6:	4640      	mov	r0, r8
 80004f8:	e791      	b.n	800041e <__udivmoddi4+0x1e6>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e7be      	b.n	800047c <__udivmoddi4+0x244>
 80004fe:	4601      	mov	r1, r0
 8000500:	e778      	b.n	80003f4 <__udivmoddi4+0x1bc>
 8000502:	3802      	subs	r0, #2
 8000504:	443c      	add	r4, r7
 8000506:	e745      	b.n	8000394 <__udivmoddi4+0x15c>
 8000508:	4608      	mov	r0, r1
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xe6>
 800050c:	f1a8 0802 	sub.w	r8, r8, #2
 8000510:	443d      	add	r5, r7
 8000512:	e72b      	b.n	800036c <__udivmoddi4+0x134>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000518:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_InitTick+0x3c>)
{
 800051c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051e:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <HAL_InitTick+0x40>)
 8000520:	7818      	ldrb	r0, [r3, #0]
 8000522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000526:	fbb3 f3f0 	udiv	r3, r3, r0
 800052a:	6810      	ldr	r0, [r2, #0]
 800052c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000530:	f000 f890 	bl	8000654 <HAL_SYSTICK_Config>
 8000534:	4604      	mov	r4, r0
 8000536:	b958      	cbnz	r0, 8000550 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000538:	2d0f      	cmp	r5, #15
 800053a:	d809      	bhi.n	8000550 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800053c:	4602      	mov	r2, r0
 800053e:	4629      	mov	r1, r5
 8000540:	f04f 30ff 	mov.w	r0, #4294967295
 8000544:	f000 f84e 	bl	80005e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000548:	4b04      	ldr	r3, [pc, #16]	; (800055c <HAL_InitTick+0x44>)
 800054a:	4620      	mov	r0, r4
 800054c:	601d      	str	r5, [r3, #0]
 800054e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000550:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000552:	bd38      	pop	{r3, r4, r5, pc}
 8000554:	20000000 	.word	0x20000000
 8000558:	2003fc0c 	.word	0x2003fc0c
 800055c:	20000004 	.word	0x20000004

08000560 <HAL_Init>:
{
 8000560:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000562:	2003      	movs	r0, #3
 8000564:	f000 f82c 	bl	80005c0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000568:	2000      	movs	r0, #0
 800056a:	f7ff ffd5 	bl	8000518 <HAL_InitTick>
  HAL_MspInit();
 800056e:	f001 fae1 	bl	8001b34 <HAL_MspInit>
}
 8000572:	2000      	movs	r0, #0
 8000574:	bd08      	pop	{r3, pc}
	...

08000578 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000578:	4a03      	ldr	r2, [pc, #12]	; (8000588 <HAL_IncTick+0x10>)
 800057a:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_IncTick+0x14>)
 800057c:	6811      	ldr	r1, [r2, #0]
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	440b      	add	r3, r1
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	2003fc30 	.word	0x2003fc30
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000590:	4b01      	ldr	r3, [pc, #4]	; (8000598 <HAL_GetTick+0x8>)
 8000592:	6818      	ldr	r0, [r3, #0]
}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	2003fc30 	.word	0x2003fc30

0800059c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800059c:	b538      	push	{r3, r4, r5, lr}
 800059e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005a0:	f7ff fff6 	bl	8000590 <HAL_GetTick>
 80005a4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005a6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005a8:	bf1e      	ittt	ne
 80005aa:	4b04      	ldrne	r3, [pc, #16]	; (80005bc <HAL_Delay+0x20>)
 80005ac:	781b      	ldrbne	r3, [r3, #0]
 80005ae:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005b0:	f7ff ffee 	bl	8000590 <HAL_GetTick>
 80005b4:	1b40      	subs	r0, r0, r5
 80005b6:	4284      	cmp	r4, r0
 80005b8:	d8fa      	bhi.n	80005b0 <HAL_Delay+0x14>
  {
  }
}
 80005ba:	bd38      	pop	{r3, r4, r5, pc}
 80005bc:	20000000 	.word	0x20000000

080005c0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c0:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005c2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005c6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005ce:	041b      	lsls	r3, r3, #16
 80005d0:	0c1b      	lsrs	r3, r3, #16
 80005d2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80005da:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005dc:	60d3      	str	r3, [r2, #12]
 80005de:	4770      	bx	lr
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e4:	4b19      	ldr	r3, [pc, #100]	; (800064c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005e6:	b530      	push	{r4, r5, lr}
 80005e8:	68dc      	ldr	r4, [r3, #12]
 80005ea:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ee:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f4:	2b04      	cmp	r3, #4
 80005f6:	bf28      	it	cs
 80005f8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fa:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000600:	bf8c      	ite	hi
 8000602:	3c03      	subhi	r4, #3
 8000604:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000606:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800060a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800060c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000610:	ea01 0103 	and.w	r1, r1, r3
 8000614:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000618:	fa05 f404 	lsl.w	r4, r5, r4
 800061c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000620:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000624:	ea42 0201 	orr.w	r2, r2, r1
 8000628:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 800062c:	db07      	blt.n	800063e <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000638:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 800063c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063e:	f000 000f 	and.w	r0, r0, #15
 8000642:	b2d2      	uxtb	r2, r2
 8000644:	4b02      	ldr	r3, [pc, #8]	; (8000650 <HAL_NVIC_SetPriority+0x6c>)
 8000646:	541a      	strb	r2, [r3, r0]
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	bf00      	nop
 800064c:	e000ed00 	.word	0xe000ed00
 8000650:	e000ed14 	.word	0xe000ed14

08000654 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000654:	3801      	subs	r0, #1
 8000656:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800065a:	d20a      	bcs.n	8000672 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	21f0      	movs	r1, #240	; 0xf0
 8000660:	4a06      	ldr	r2, [pc, #24]	; (800067c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000662:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000664:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000666:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800066c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000672:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000e010 	.word	0xe000e010
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000684:	680b      	ldr	r3, [r1, #0]
{
 8000686:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000688:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800084c <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800068c:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 800068e:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000690:	4a6c      	ldr	r2, [pc, #432]	; (8000844 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000692:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000850 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000696:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000698:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 800069a:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800069c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800069e:	42ac      	cmp	r4, r5
 80006a0:	f040 80b6 	bne.w	8000810 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006a4:	684c      	ldr	r4, [r1, #4]
 80006a6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80006aa:	f024 0c10 	bic.w	ip, r4, #16
 80006ae:	f10c 36ff 	add.w	r6, ip, #4294967295
 80006b2:	2e01      	cmp	r6, #1
 80006b4:	d812      	bhi.n	80006dc <HAL_GPIO_Init+0x5c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80006b6:	2603      	movs	r6, #3
        temp = GPIOx->OSPEEDR; 
 80006b8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80006ba:	fa06 f60e 	lsl.w	r6, r6, lr
 80006be:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 80006c2:	68ce      	ldr	r6, [r1, #12]
 80006c4:	fa06 f60e 	lsl.w	r6, r6, lr
 80006c8:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80006ca:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80006cc:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OTYPER;
 80006d0:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80006d2:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006d4:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80006d8:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80006da:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80006dc:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80006de:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006e0:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80006e4:	fa06 f60e 	lsl.w	r6, r6, lr
 80006e8:	ea6f 0606 	mvn.w	r6, r6
 80006ec:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80006f0:	688f      	ldr	r7, [r1, #8]
 80006f2:	fa07 f70e 	lsl.w	r7, r7, lr
 80006f6:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 80006fa:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006fc:	d116      	bne.n	800072c <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3];
 80006fe:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000702:	f003 0b07 	and.w	fp, r3, #7
 8000706:	f04f 0c0f 	mov.w	ip, #15
 800070a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800070e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000712:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000716:	fa0c fc0b 	lsl.w	ip, ip, fp
 800071a:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800071e:	690f      	ldr	r7, [r1, #16]
 8000720:	fa07 f70b 	lsl.w	r7, r7, fp
 8000724:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8000728:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800072c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800072e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000730:	f004 0703 	and.w	r7, r4, #3
 8000734:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000738:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800073c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800073e:	00e6      	lsls	r6, r4, #3
 8000740:	d566      	bpl.n	8000810 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000742:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000746:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800074a:	f003 0e03 	and.w	lr, r3, #3
 800074e:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000756:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800075a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075e:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 8000762:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000766:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 800076a:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800076e:	9603      	str	r6, [sp, #12]
 8000770:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000772:	fa0c f60e 	lsl.w	r6, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000776:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800077a:	ea2a 0c06 	bic.w	ip, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800077e:	4e32      	ldr	r6, [pc, #200]	; (8000848 <HAL_GPIO_Init+0x1c8>)
 8000780:	42b0      	cmp	r0, r6
 8000782:	d04c      	beq.n	800081e <HAL_GPIO_Init+0x19e>
 8000784:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000788:	42b0      	cmp	r0, r6
 800078a:	d04a      	beq.n	8000822 <HAL_GPIO_Init+0x1a2>
 800078c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000790:	42b0      	cmp	r0, r6
 8000792:	d048      	beq.n	8000826 <HAL_GPIO_Init+0x1a6>
 8000794:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000798:	42b0      	cmp	r0, r6
 800079a:	d046      	beq.n	800082a <HAL_GPIO_Init+0x1aa>
 800079c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007a0:	42b0      	cmp	r0, r6
 80007a2:	d044      	beq.n	800082e <HAL_GPIO_Init+0x1ae>
 80007a4:	4548      	cmp	r0, r9
 80007a6:	d044      	beq.n	8000832 <HAL_GPIO_Init+0x1b2>
 80007a8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80007ac:	42b0      	cmp	r0, r6
 80007ae:	d042      	beq.n	8000836 <HAL_GPIO_Init+0x1b6>
 80007b0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007b4:	42b0      	cmp	r0, r6
 80007b6:	d040      	beq.n	800083a <HAL_GPIO_Init+0x1ba>
 80007b8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007bc:	42b0      	cmp	r0, r6
 80007be:	d03e      	beq.n	800083e <HAL_GPIO_Init+0x1be>
 80007c0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007c4:	42b0      	cmp	r0, r6
 80007c6:	bf14      	ite	ne
 80007c8:	260a      	movne	r6, #10
 80007ca:	2609      	moveq	r6, #9
 80007cc:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007d0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80007d4:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80007d8:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80007da:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 80007de:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007e0:	bf0c      	ite	eq
 80007e2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007e4:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007e6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 80007ea:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 80007ec:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80007ee:	bf0c      	ite	eq
 80007f0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007f2:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007f4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 80007f8:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 80007fa:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80007fc:	bf0c      	ite	eq
 80007fe:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000800:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000802:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000804:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000806:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000808:	bf54      	ite	pl
 800080a:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 800080c:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800080e:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000810:	3301      	adds	r3, #1
 8000812:	2b10      	cmp	r3, #16
 8000814:	f47f af3f 	bne.w	8000696 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000818:	b005      	add	sp, #20
 800081a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800081e:	2600      	movs	r6, #0
 8000820:	e7d4      	b.n	80007cc <HAL_GPIO_Init+0x14c>
 8000822:	2601      	movs	r6, #1
 8000824:	e7d2      	b.n	80007cc <HAL_GPIO_Init+0x14c>
 8000826:	2602      	movs	r6, #2
 8000828:	e7d0      	b.n	80007cc <HAL_GPIO_Init+0x14c>
 800082a:	2603      	movs	r6, #3
 800082c:	e7ce      	b.n	80007cc <HAL_GPIO_Init+0x14c>
 800082e:	2604      	movs	r6, #4
 8000830:	e7cc      	b.n	80007cc <HAL_GPIO_Init+0x14c>
 8000832:	2605      	movs	r6, #5
 8000834:	e7ca      	b.n	80007cc <HAL_GPIO_Init+0x14c>
 8000836:	2606      	movs	r6, #6
 8000838:	e7c8      	b.n	80007cc <HAL_GPIO_Init+0x14c>
 800083a:	2607      	movs	r6, #7
 800083c:	e7c6      	b.n	80007cc <HAL_GPIO_Init+0x14c>
 800083e:	2608      	movs	r6, #8
 8000840:	e7c4      	b.n	80007cc <HAL_GPIO_Init+0x14c>
 8000842:	bf00      	nop
 8000844:	40013c00 	.word	0x40013c00
 8000848:	40020000 	.word	0x40020000
 800084c:	40023800 	.word	0x40023800
 8000850:	40021400 	.word	0x40021400

08000854 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000854:	6903      	ldr	r3, [r0, #16]
 8000856:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000858:	bf14      	ite	ne
 800085a:	2001      	movne	r0, #1
 800085c:	2000      	moveq	r0, #0
 800085e:	4770      	bx	lr

08000860 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000860:	b10a      	cbz	r2, 8000866 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000862:	6181      	str	r1, [r0, #24]
 8000864:	4770      	bx	lr
 8000866:	0409      	lsls	r1, r1, #16
 8000868:	e7fb      	b.n	8000862 <HAL_GPIO_WritePin+0x2>

0800086a <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800086a:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800086c:	f04f 0c00 	mov.w	ip, #0
{
 8000870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000874:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000876:	6804      	ldr	r4, [r0, #0]
 8000878:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800087a:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800087c:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800087e:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000882:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000884:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000888:	f10e 0601 	add.w	r6, lr, #1
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800088c:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000890:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000894:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000896:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000898:	68e0      	ldr	r0, [r4, #12]
 800089a:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800089e:	4430      	add	r0, r6
 80008a0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80008a4:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80008a6:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80008a8:	68e0      	ldr	r0, [r4, #12]
 80008aa:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80008ae:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80008b0:	6898      	ldr	r0, [r3, #8]
 80008b2:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 80008b6:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80008b8:	6888      	ldr	r0, [r1, #8]
 80008ba:	68e6      	ldr	r6, [r4, #12]
 80008bc:	3001      	adds	r0, #1
 80008be:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80008c2:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80008c4:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80008c6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80008ca:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80008cc:	6918      	ldr	r0, [r3, #16]
 80008ce:	f020 0007 	bic.w	r0, r0, #7
 80008d2:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80008d4:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80008d6:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80008d8:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80008dc:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80008e0:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80008e4:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80008e8:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80008ec:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80008f0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008f4:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80008f6:	6958      	ldr	r0, [r3, #20]
 80008f8:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80008fc:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80008fe:	6948      	ldr	r0, [r1, #20]
 8000900:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8000902:	69d8      	ldr	r0, [r3, #28]
 8000904:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000908:	f020 0007 	bic.w	r0, r0, #7
 800090c:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800090e:	6a08      	ldr	r0, [r1, #32]
 8000910:	69cd      	ldr	r5, [r1, #28]
 8000912:	4305      	orrs	r5, r0
 8000914:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8000916:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8000918:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800091a:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800091e:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8000920:	b31e      	cbz	r6, 800096a <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8000922:	2e01      	cmp	r6, #1
 8000924:	d023      	beq.n	800096e <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8000926:	1eb0      	subs	r0, r6, #2
 8000928:	2802      	cmp	r0, #2
 800092a:	d922      	bls.n	8000972 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800092c:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800092e:	bf0c      	ite	eq
 8000930:	2002      	moveq	r0, #2
 8000932:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8000934:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8000936:	eba7 070e 	sub.w	r7, r7, lr
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800093a:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 800093e:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8000940:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8000942:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8000944:	4345      	muls	r5, r0
 8000946:	4378      	muls	r0, r7
 8000948:	3003      	adds	r0, #3
 800094a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800094e:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8000950:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000952:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8000956:	f020 0007 	bic.w	r0, r0, #7
 800095a:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800095c:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800095e:	58a3      	ldr	r3, [r4, r2]
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	50a3      	str	r3, [r4, r2]
 8000966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800096a:	2004      	movs	r0, #4
 800096c:	e7e2      	b.n	8000934 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800096e:	2003      	movs	r0, #3
 8000970:	e7e0      	b.n	8000934 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8000972:	2002      	movs	r0, #2
 8000974:	e7de      	b.n	8000934 <LTDC_SetConfig+0xca>
	...

08000978 <HAL_LTDC_Init>:
{
 8000978:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800097a:	4604      	mov	r4, r0
 800097c:	2800      	cmp	r0, #0
 800097e:	d063      	beq.n	8000a48 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8000980:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8000984:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000988:	b91b      	cbnz	r3, 8000992 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800098a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800098e:	f001 f8e9 	bl	8001b64 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000992:	2302      	movs	r3, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000994:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000996:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800099a:	6823      	ldr	r3, [r4, #0]
 800099c:	699a      	ldr	r2, [r3, #24]
 800099e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80009a2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80009a4:	6862      	ldr	r2, [r4, #4]
 80009a6:	6999      	ldr	r1, [r3, #24]
 80009a8:	4302      	orrs	r2, r0
 80009aa:	68e0      	ldr	r0, [r4, #12]
 80009ac:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80009ae:	6920      	ldr	r0, [r4, #16]
 80009b0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80009b2:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80009b4:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80009b6:	4925      	ldr	r1, [pc, #148]	; (8000a4c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80009b8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80009ba:	689a      	ldr	r2, [r3, #8]
 80009bc:	400a      	ands	r2, r1
 80009be:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80009c0:	689a      	ldr	r2, [r3, #8]
 80009c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009c6:	69a0      	ldr	r0, [r4, #24]
 80009c8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80009ca:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80009cc:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80009ce:	68da      	ldr	r2, [r3, #12]
 80009d0:	400a      	ands	r2, r1
 80009d2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80009d4:	68da      	ldr	r2, [r3, #12]
 80009d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009da:	6a20      	ldr	r0, [r4, #32]
 80009dc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80009de:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80009e0:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80009e2:	691a      	ldr	r2, [r3, #16]
 80009e4:	400a      	ands	r2, r1
 80009e6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80009e8:	691a      	ldr	r2, [r3, #16]
 80009ea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80009f0:	4302      	orrs	r2, r0
 80009f2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80009f4:	695a      	ldr	r2, [r3, #20]
 80009f6:	4011      	ands	r1, r2
 80009f8:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80009fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80009fc:	695a      	ldr	r2, [r3, #20]
 80009fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000a04:	430a      	orrs	r2, r1
 8000a06:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000a08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8000a0a:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000a0e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8000a12:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000a16:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8000a18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a1a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8000a24:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8000a28:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8000a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8000a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a2e:	f042 0206 	orr.w	r2, r2, #6
 8000a32:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8000a34:	699a      	ldr	r2, [r3, #24]
 8000a36:	f042 0201 	orr.w	r2, r2, #1
 8000a3a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8000a3c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8000a3e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8000a42:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 8000a46:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000a48:	2001      	movs	r0, #1
}
 8000a4a:	bd38      	pop	{r3, r4, r5, pc}
 8000a4c:	f000f800 	.word	0xf000f800

08000a50 <HAL_LTDC_ConfigLayer>:
{
 8000a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8000a52:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8000a56:	4606      	mov	r6, r0
 8000a58:	468e      	mov	lr, r1
 8000a5a:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	f04f 0002 	mov.w	r0, #2
 8000a62:	d01d      	beq.n	8000aa0 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8000a64:	2434      	movs	r4, #52	; 0x34
 8000a66:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000a68:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 8000a6c:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8000a6e:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8000a72:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8000a76:	3438      	adds	r4, #56	; 0x38
 8000a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a84:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8000a86:	4630      	mov	r0, r6
 8000a88:	4662      	mov	r2, ip
 8000a8a:	4671      	mov	r1, lr
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8000a8c:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8000a8e:	f7ff feec 	bl	800086a <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8000a92:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8000a94:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8000a96:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8000a98:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8000a9c:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8000aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000aa2 <HAL_LTDC_SetAddress>:
  __HAL_LOCK(hltdc);
 8000aa2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	f04f 0302 	mov.w	r3, #2
{
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 8000ab0:	d015      	beq.n	8000ade <HAL_LTDC_SetAddress+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000ab2:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->FBStartAdress = Address;
 8000ab6:	2334      	movs	r3, #52	; 0x34
  __HAL_LOCK(hltdc);
 8000ab8:	2501      	movs	r5, #1
  pLayerCfg->FBStartAdress = Address;
 8000aba:	4353      	muls	r3, r2
  __HAL_LOCK(hltdc);
 8000abc:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
 8000ac0:	18c6      	adds	r6, r0, r3
 8000ac2:	65f1      	str	r1, [r6, #92]	; 0x5c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8000ac4:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8000ac8:	4401      	add	r1, r0
 8000aca:	f7ff fece 	bl	800086a <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8000ace:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8000ad0:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8000ad2:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8000ad4:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8000ad8:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  return HAL_OK;
 8000adc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 8000ade:	4618      	mov	r0, r3
}
 8000ae0:	bd70      	pop	{r4, r5, r6, pc}
	...

08000ae4 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae4:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <HAL_PWREx_EnableOverDrive+0x68>)
{
 8000ae6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000aea:	4c19      	ldr	r4, [pc, #100]	; (8000b50 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000af0:	641a      	str	r2, [r3, #64]	; 0x40
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af8:	9301      	str	r3, [sp, #4]
 8000afa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000afc:	6823      	ldr	r3, [r4, #0]
 8000afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b02:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b04:	f7ff fd44 	bl	8000590 <HAL_GetTick>
 8000b08:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000b0a:	6863      	ldr	r3, [r4, #4]
 8000b0c:	03da      	lsls	r2, r3, #15
 8000b0e:	d50c      	bpl.n	8000b2a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000b10:	6823      	ldr	r3, [r4, #0]
 8000b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b16:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b18:	f7ff fd3a 	bl	8000590 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000b1c:	4c0c      	ldr	r4, [pc, #48]	; (8000b50 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8000b1e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000b20:	6863      	ldr	r3, [r4, #4]
 8000b22:	039b      	lsls	r3, r3, #14
 8000b24:	d50a      	bpl.n	8000b3c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000b26:	2000      	movs	r0, #0
 8000b28:	e006      	b.n	8000b38 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000b2a:	f7ff fd31 	bl	8000590 <HAL_GetTick>
 8000b2e:	1b40      	subs	r0, r0, r5
 8000b30:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000b34:	d9e9      	bls.n	8000b0a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8000b36:	2003      	movs	r0, #3
}
 8000b38:	b003      	add	sp, #12
 8000b3a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000b3c:	f7ff fd28 	bl	8000590 <HAL_GetTick>
 8000b40:	1b40      	subs	r0, r0, r5
 8000b42:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000b46:	d9eb      	bls.n	8000b20 <HAL_PWREx_EnableOverDrive+0x3c>
 8000b48:	e7f5      	b.n	8000b36 <HAL_PWREx_EnableOverDrive+0x52>
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40007000 	.word	0x40007000

08000b54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b58:	4604      	mov	r4, r0
 8000b5a:	b908      	cbnz	r0, 8000b60 <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	e03f      	b.n	8000be0 <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b60:	6803      	ldr	r3, [r0, #0]
 8000b62:	07d8      	lsls	r0, r3, #31
 8000b64:	d410      	bmi.n	8000b88 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b66:	6823      	ldr	r3, [r4, #0]
 8000b68:	0799      	lsls	r1, r3, #30
 8000b6a:	d460      	bmi.n	8000c2e <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b6c:	6823      	ldr	r3, [r4, #0]
 8000b6e:	0719      	lsls	r1, r3, #28
 8000b70:	f100 80a5 	bmi.w	8000cbe <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b74:	6823      	ldr	r3, [r4, #0]
 8000b76:	075a      	lsls	r2, r3, #29
 8000b78:	f100 80c6 	bmi.w	8000d08 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b7c:	69a0      	ldr	r0, [r4, #24]
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	f040 8130 	bne.w	8000de4 <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 8000b84:	2000      	movs	r0, #0
 8000b86:	e02b      	b.n	8000be0 <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b88:	4b94      	ldr	r3, [pc, #592]	; (8000ddc <HAL_RCC_OscConfig+0x288>)
 8000b8a:	689a      	ldr	r2, [r3, #8]
 8000b8c:	f002 020c 	and.w	r2, r2, #12
 8000b90:	2a04      	cmp	r2, #4
 8000b92:	d007      	beq.n	8000ba4 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	f002 020c 	and.w	r2, r2, #12
 8000b9a:	2a08      	cmp	r2, #8
 8000b9c:	d10a      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x60>
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	025a      	lsls	r2, r3, #9
 8000ba2:	d507      	bpl.n	8000bb4 <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba4:	4b8d      	ldr	r3, [pc, #564]	; (8000ddc <HAL_RCC_OscConfig+0x288>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	039b      	lsls	r3, r3, #14
 8000baa:	d5dc      	bpl.n	8000b66 <HAL_RCC_OscConfig+0x12>
 8000bac:	6863      	ldr	r3, [r4, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1d9      	bne.n	8000b66 <HAL_RCC_OscConfig+0x12>
 8000bb2:	e7d3      	b.n	8000b5c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bb4:	6863      	ldr	r3, [r4, #4]
 8000bb6:	4d89      	ldr	r5, [pc, #548]	; (8000ddc <HAL_RCC_OscConfig+0x288>)
 8000bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bbc:	d113      	bne.n	8000be6 <HAL_RCC_OscConfig+0x92>
 8000bbe:	682b      	ldr	r3, [r5, #0]
 8000bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bc6:	f7ff fce3 	bl	8000590 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bca:	4d84      	ldr	r5, [pc, #528]	; (8000ddc <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8000bcc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bce:	682b      	ldr	r3, [r5, #0]
 8000bd0:	039f      	lsls	r7, r3, #14
 8000bd2:	d4c8      	bmi.n	8000b66 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bd4:	f7ff fcdc 	bl	8000590 <HAL_GetTick>
 8000bd8:	1b80      	subs	r0, r0, r6
 8000bda:	2864      	cmp	r0, #100	; 0x64
 8000bdc:	d9f7      	bls.n	8000bce <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000bde:	2003      	movs	r0, #3
}
 8000be0:	b002      	add	sp, #8
 8000be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000be6:	b99b      	cbnz	r3, 8000c10 <HAL_RCC_OscConfig+0xbc>
 8000be8:	682b      	ldr	r3, [r5, #0]
 8000bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bee:	602b      	str	r3, [r5, #0]
 8000bf0:	682b      	ldr	r3, [r5, #0]
 8000bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bf6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bf8:	f7ff fcca 	bl	8000590 <HAL_GetTick>
 8000bfc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bfe:	682b      	ldr	r3, [r5, #0]
 8000c00:	0398      	lsls	r0, r3, #14
 8000c02:	d5b0      	bpl.n	8000b66 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c04:	f7ff fcc4 	bl	8000590 <HAL_GetTick>
 8000c08:	1b80      	subs	r0, r0, r6
 8000c0a:	2864      	cmp	r0, #100	; 0x64
 8000c0c:	d9f7      	bls.n	8000bfe <HAL_RCC_OscConfig+0xaa>
 8000c0e:	e7e6      	b.n	8000bde <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c14:	682b      	ldr	r3, [r5, #0]
 8000c16:	d103      	bne.n	8000c20 <HAL_RCC_OscConfig+0xcc>
 8000c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c1c:	602b      	str	r3, [r5, #0]
 8000c1e:	e7ce      	b.n	8000bbe <HAL_RCC_OscConfig+0x6a>
 8000c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c24:	602b      	str	r3, [r5, #0]
 8000c26:	682b      	ldr	r3, [r5, #0]
 8000c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c2c:	e7ca      	b.n	8000bc4 <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c2e:	4b6b      	ldr	r3, [pc, #428]	; (8000ddc <HAL_RCC_OscConfig+0x288>)
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	f012 0f0c 	tst.w	r2, #12
 8000c36:	d007      	beq.n	8000c48 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c38:	689a      	ldr	r2, [r3, #8]
 8000c3a:	f002 020c 	and.w	r2, r2, #12
 8000c3e:	2a08      	cmp	r2, #8
 8000c40:	d111      	bne.n	8000c66 <HAL_RCC_OscConfig+0x112>
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	0259      	lsls	r1, r3, #9
 8000c46:	d40e      	bmi.n	8000c66 <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c48:	4b64      	ldr	r3, [pc, #400]	; (8000ddc <HAL_RCC_OscConfig+0x288>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	0792      	lsls	r2, r2, #30
 8000c4e:	d502      	bpl.n	8000c56 <HAL_RCC_OscConfig+0x102>
 8000c50:	68e2      	ldr	r2, [r4, #12]
 8000c52:	2a01      	cmp	r2, #1
 8000c54:	d182      	bne.n	8000b5c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	6921      	ldr	r1, [r4, #16]
 8000c5a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000c5e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000c62:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c64:	e782      	b.n	8000b6c <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000c66:	68e3      	ldr	r3, [r4, #12]
 8000c68:	4d5c      	ldr	r5, [pc, #368]	; (8000ddc <HAL_RCC_OscConfig+0x288>)
 8000c6a:	b1bb      	cbz	r3, 8000c9c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8000c6c:	682b      	ldr	r3, [r5, #0]
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c74:	f7ff fc8c 	bl	8000590 <HAL_GetTick>
 8000c78:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c7a:	682b      	ldr	r3, [r5, #0]
 8000c7c:	079f      	lsls	r7, r3, #30
 8000c7e:	d507      	bpl.n	8000c90 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c80:	682b      	ldr	r3, [r5, #0]
 8000c82:	6922      	ldr	r2, [r4, #16]
 8000c84:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c88:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c8c:	602b      	str	r3, [r5, #0]
 8000c8e:	e76d      	b.n	8000b6c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c90:	f7ff fc7e 	bl	8000590 <HAL_GetTick>
 8000c94:	1b80      	subs	r0, r0, r6
 8000c96:	2802      	cmp	r0, #2
 8000c98:	d9ef      	bls.n	8000c7a <HAL_RCC_OscConfig+0x126>
 8000c9a:	e7a0      	b.n	8000bde <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000c9c:	682b      	ldr	r3, [r5, #0]
 8000c9e:	f023 0301 	bic.w	r3, r3, #1
 8000ca2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ca4:	f7ff fc74 	bl	8000590 <HAL_GetTick>
 8000ca8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000caa:	682b      	ldr	r3, [r5, #0]
 8000cac:	0798      	lsls	r0, r3, #30
 8000cae:	f57f af5d 	bpl.w	8000b6c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cb2:	f7ff fc6d 	bl	8000590 <HAL_GetTick>
 8000cb6:	1b80      	subs	r0, r0, r6
 8000cb8:	2802      	cmp	r0, #2
 8000cba:	d9f6      	bls.n	8000caa <HAL_RCC_OscConfig+0x156>
 8000cbc:	e78f      	b.n	8000bde <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000cbe:	6963      	ldr	r3, [r4, #20]
 8000cc0:	4d46      	ldr	r5, [pc, #280]	; (8000ddc <HAL_RCC_OscConfig+0x288>)
 8000cc2:	b183      	cbz	r3, 8000ce6 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8000cc4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000ccc:	f7ff fc60 	bl	8000590 <HAL_GetTick>
 8000cd0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cd2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000cd4:	079b      	lsls	r3, r3, #30
 8000cd6:	f53f af4d 	bmi.w	8000b74 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cda:	f7ff fc59 	bl	8000590 <HAL_GetTick>
 8000cde:	1b80      	subs	r0, r0, r6
 8000ce0:	2802      	cmp	r0, #2
 8000ce2:	d9f6      	bls.n	8000cd2 <HAL_RCC_OscConfig+0x17e>
 8000ce4:	e77b      	b.n	8000bde <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000ce6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ce8:	f023 0301 	bic.w	r3, r3, #1
 8000cec:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000cee:	f7ff fc4f 	bl	8000590 <HAL_GetTick>
 8000cf2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cf4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000cf6:	079f      	lsls	r7, r3, #30
 8000cf8:	f57f af3c 	bpl.w	8000b74 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cfc:	f7ff fc48 	bl	8000590 <HAL_GetTick>
 8000d00:	1b80      	subs	r0, r0, r6
 8000d02:	2802      	cmp	r0, #2
 8000d04:	d9f6      	bls.n	8000cf4 <HAL_RCC_OscConfig+0x1a0>
 8000d06:	e76a      	b.n	8000bde <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d08:	4b34      	ldr	r3, [pc, #208]	; (8000ddc <HAL_RCC_OscConfig+0x288>)
 8000d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d0c:	00d0      	lsls	r0, r2, #3
 8000d0e:	d427      	bmi.n	8000d60 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000d12:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d18:	641a      	str	r2, [r3, #64]	; 0x40
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d20:	9301      	str	r3, [sp, #4]
 8000d22:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d24:	4d2e      	ldr	r5, [pc, #184]	; (8000de0 <HAL_RCC_OscConfig+0x28c>)
 8000d26:	682b      	ldr	r3, [r5, #0]
 8000d28:	05d9      	lsls	r1, r3, #23
 8000d2a:	d51b      	bpl.n	8000d64 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d2c:	68a3      	ldr	r3, [r4, #8]
 8000d2e:	4d2b      	ldr	r5, [pc, #172]	; (8000ddc <HAL_RCC_OscConfig+0x288>)
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d127      	bne.n	8000d84 <HAL_RCC_OscConfig+0x230>
 8000d34:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d3c:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d40:	f7ff fc26 	bl	8000590 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d44:	4f25      	ldr	r7, [pc, #148]	; (8000ddc <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8000d46:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d4a:	079b      	lsls	r3, r3, #30
 8000d4c:	d53f      	bpl.n	8000dce <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	f43f af14 	beq.w	8000b7c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d54:	4a21      	ldr	r2, [pc, #132]	; (8000ddc <HAL_RCC_OscConfig+0x288>)
 8000d56:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	e70d      	b.n	8000b7c <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 8000d60:	2600      	movs	r6, #0
 8000d62:	e7df      	b.n	8000d24 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8000d64:	682b      	ldr	r3, [r5, #0]
 8000d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000d6c:	f7ff fc10 	bl	8000590 <HAL_GetTick>
 8000d70:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d72:	682b      	ldr	r3, [r5, #0]
 8000d74:	05da      	lsls	r2, r3, #23
 8000d76:	d4d9      	bmi.n	8000d2c <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d78:	f7ff fc0a 	bl	8000590 <HAL_GetTick>
 8000d7c:	1bc0      	subs	r0, r0, r7
 8000d7e:	2864      	cmp	r0, #100	; 0x64
 8000d80:	d9f7      	bls.n	8000d72 <HAL_RCC_OscConfig+0x21e>
 8000d82:	e72c      	b.n	8000bde <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d84:	b9ab      	cbnz	r3, 8000db2 <HAL_RCC_OscConfig+0x25e>
 8000d86:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d88:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d8c:	f023 0301 	bic.w	r3, r3, #1
 8000d90:	672b      	str	r3, [r5, #112]	; 0x70
 8000d92:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d94:	f023 0304 	bic.w	r3, r3, #4
 8000d98:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000d9a:	f7ff fbf9 	bl	8000590 <HAL_GetTick>
 8000d9e:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000da0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000da2:	0798      	lsls	r0, r3, #30
 8000da4:	d5d3      	bpl.n	8000d4e <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000da6:	f7ff fbf3 	bl	8000590 <HAL_GetTick>
 8000daa:	1bc0      	subs	r0, r0, r7
 8000dac:	4540      	cmp	r0, r8
 8000dae:	d9f7      	bls.n	8000da0 <HAL_RCC_OscConfig+0x24c>
 8000db0:	e715      	b.n	8000bde <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000db2:	2b05      	cmp	r3, #5
 8000db4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000db6:	d103      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x26c>
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	672b      	str	r3, [r5, #112]	; 0x70
 8000dbe:	e7b9      	b.n	8000d34 <HAL_RCC_OscConfig+0x1e0>
 8000dc0:	f023 0301 	bic.w	r3, r3, #1
 8000dc4:	672b      	str	r3, [r5, #112]	; 0x70
 8000dc6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000dc8:	f023 0304 	bic.w	r3, r3, #4
 8000dcc:	e7b5      	b.n	8000d3a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dce:	f7ff fbdf 	bl	8000590 <HAL_GetTick>
 8000dd2:	eba0 0008 	sub.w	r0, r0, r8
 8000dd6:	42a8      	cmp	r0, r5
 8000dd8:	d9b6      	bls.n	8000d48 <HAL_RCC_OscConfig+0x1f4>
 8000dda:	e700      	b.n	8000bde <HAL_RCC_OscConfig+0x8a>
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000de4:	4d38      	ldr	r5, [pc, #224]	; (8000ec8 <HAL_RCC_OscConfig+0x374>)
 8000de6:	68ab      	ldr	r3, [r5, #8]
 8000de8:	f003 030c 	and.w	r3, r3, #12
 8000dec:	2b08      	cmp	r3, #8
 8000dee:	d041      	beq.n	8000e74 <HAL_RCC_OscConfig+0x320>
        __HAL_RCC_PLL_DISABLE();
 8000df0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000df2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000df4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000df8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dfa:	d12e      	bne.n	8000e5a <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8000dfc:	f7ff fbc8 	bl	8000590 <HAL_GetTick>
 8000e00:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e02:	682b      	ldr	r3, [r5, #0]
 8000e04:	0199      	lsls	r1, r3, #6
 8000e06:	d422      	bmi.n	8000e4e <HAL_RCC_OscConfig+0x2fa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e08:	6a22      	ldr	r2, [r4, #32]
 8000e0a:	69e3      	ldr	r3, [r4, #28]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e14:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000e18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000e1a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000e1e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e20:	4c29      	ldr	r4, [pc, #164]	; (8000ec8 <HAL_RCC_OscConfig+0x374>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e22:	0852      	lsrs	r2, r2, #1
 8000e24:	3a01      	subs	r2, #1
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e2c:	682b      	ldr	r3, [r5, #0]
 8000e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e32:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e34:	f7ff fbac 	bl	8000590 <HAL_GetTick>
 8000e38:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e3a:	6823      	ldr	r3, [r4, #0]
 8000e3c:	019a      	lsls	r2, r3, #6
 8000e3e:	f53f aea1 	bmi.w	8000b84 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e42:	f7ff fba5 	bl	8000590 <HAL_GetTick>
 8000e46:	1b40      	subs	r0, r0, r5
 8000e48:	2802      	cmp	r0, #2
 8000e4a:	d9f6      	bls.n	8000e3a <HAL_RCC_OscConfig+0x2e6>
 8000e4c:	e6c7      	b.n	8000bde <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e4e:	f7ff fb9f 	bl	8000590 <HAL_GetTick>
 8000e52:	1b80      	subs	r0, r0, r6
 8000e54:	2802      	cmp	r0, #2
 8000e56:	d9d4      	bls.n	8000e02 <HAL_RCC_OscConfig+0x2ae>
 8000e58:	e6c1      	b.n	8000bde <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000e5a:	f7ff fb99 	bl	8000590 <HAL_GetTick>
 8000e5e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e60:	682b      	ldr	r3, [r5, #0]
 8000e62:	019b      	lsls	r3, r3, #6
 8000e64:	f57f ae8e 	bpl.w	8000b84 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e68:	f7ff fb92 	bl	8000590 <HAL_GetTick>
 8000e6c:	1b00      	subs	r0, r0, r4
 8000e6e:	2802      	cmp	r0, #2
 8000e70:	d9f6      	bls.n	8000e60 <HAL_RCC_OscConfig+0x30c>
 8000e72:	e6b4      	b.n	8000bde <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000e74:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8000e76:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000e78:	f43f aeb2 	beq.w	8000be0 <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000e80:	69e1      	ldr	r1, [r4, #28]
 8000e82:	428a      	cmp	r2, r1
 8000e84:	f47f ae6a 	bne.w	8000b5c <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000e88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e8c:	6a21      	ldr	r1, [r4, #32]
 8000e8e:	428a      	cmp	r2, r1
 8000e90:	f47f ae64 	bne.w	8000b5c <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000e94:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000e98:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000ea0:	f47f ae5c 	bne.w	8000b5c <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8000ea4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ea6:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000eaa:	0852      	lsrs	r2, r2, #1
 8000eac:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000eae:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000eb2:	f47f ae53 	bne.w	8000b5c <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000eb6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000eb8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8000ebc:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 8000ec0:	bf14      	ite	ne
 8000ec2:	2001      	movne	r0, #1
 8000ec4:	2000      	moveq	r0, #0
 8000ec6:	e68b      	b.n	8000be0 <HAL_RCC_OscConfig+0x8c>
 8000ec8:	40023800 	.word	0x40023800

08000ecc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ecc:	4913      	ldr	r1, [pc, #76]	; (8000f1c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000ece:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ed0:	688b      	ldr	r3, [r1, #8]
 8000ed2:	f003 030c 	and.w	r3, r3, #12
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	d003      	beq.n	8000ee2 <HAL_RCC_GetSysClockFreq+0x16>
 8000eda:	2b08      	cmp	r3, #8
 8000edc:	d003      	beq.n	8000ee6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000ede:	4810      	ldr	r0, [pc, #64]	; (8000f20 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ee0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000ee2:	4810      	ldr	r0, [pc, #64]	; (8000f24 <HAL_RCC_GetSysClockFreq+0x58>)
 8000ee4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ee6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000ee8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000eea:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000eec:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000ef0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ef4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000ef8:	bf1a      	itte	ne
 8000efa:	480a      	ldrne	r0, [pc, #40]	; (8000f24 <HAL_RCC_GetSysClockFreq+0x58>)
 8000efc:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000efe:	4808      	ldreq	r0, [pc, #32]	; (8000f20 <HAL_RCC_GetSysClockFreq+0x54>)
 8000f00:	fba1 0100 	umull	r0, r1, r1, r0
 8000f04:	f7ff f980 	bl	8000208 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <HAL_RCC_GetSysClockFreq+0x50>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000f10:	3301      	adds	r3, #1
 8000f12:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8000f14:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f18:	bd08      	pop	{r3, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	00f42400 	.word	0x00f42400
 8000f24:	017d7840 	.word	0x017d7840

08000f28 <HAL_RCC_ClockConfig>:
{
 8000f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f2c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000f2e:	4604      	mov	r4, r0
 8000f30:	b910      	cbnz	r0, 8000f38 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000f32:	2001      	movs	r0, #1
 8000f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f38:	4a46      	ldr	r2, [pc, #280]	; (8001054 <HAL_RCC_ClockConfig+0x12c>)
 8000f3a:	6813      	ldr	r3, [r2, #0]
 8000f3c:	f003 030f 	and.w	r3, r3, #15
 8000f40:	428b      	cmp	r3, r1
 8000f42:	d329      	bcc.n	8000f98 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f44:	6821      	ldr	r1, [r4, #0]
 8000f46:	078f      	lsls	r7, r1, #30
 8000f48:	d431      	bmi.n	8000fae <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f4a:	07c8      	lsls	r0, r1, #31
 8000f4c:	d444      	bmi.n	8000fd8 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000f4e:	4a41      	ldr	r2, [pc, #260]	; (8001054 <HAL_RCC_ClockConfig+0x12c>)
 8000f50:	6813      	ldr	r3, [r2, #0]
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	429d      	cmp	r5, r3
 8000f58:	d368      	bcc.n	800102c <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f5a:	6822      	ldr	r2, [r4, #0]
 8000f5c:	0751      	lsls	r1, r2, #29
 8000f5e:	d471      	bmi.n	8001044 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f60:	0713      	lsls	r3, r2, #28
 8000f62:	d507      	bpl.n	8000f74 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f64:	4a3c      	ldr	r2, [pc, #240]	; (8001058 <HAL_RCC_ClockConfig+0x130>)
 8000f66:	6921      	ldr	r1, [r4, #16]
 8000f68:	6893      	ldr	r3, [r2, #8]
 8000f6a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000f6e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f72:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000f74:	f7ff ffaa 	bl	8000ecc <HAL_RCC_GetSysClockFreq>
 8000f78:	4b37      	ldr	r3, [pc, #220]	; (8001058 <HAL_RCC_ClockConfig+0x130>)
 8000f7a:	4a38      	ldr	r2, [pc, #224]	; (800105c <HAL_RCC_ClockConfig+0x134>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f82:	5cd3      	ldrb	r3, [r2, r3]
 8000f84:	40d8      	lsrs	r0, r3
 8000f86:	4b36      	ldr	r3, [pc, #216]	; (8001060 <HAL_RCC_ClockConfig+0x138>)
 8000f88:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000f8a:	4b36      	ldr	r3, [pc, #216]	; (8001064 <HAL_RCC_ClockConfig+0x13c>)
 8000f8c:	6818      	ldr	r0, [r3, #0]
 8000f8e:	f7ff fac3 	bl	8000518 <HAL_InitTick>
  return HAL_OK;
 8000f92:	2000      	movs	r0, #0
 8000f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f98:	6813      	ldr	r3, [r2, #0]
 8000f9a:	f023 030f 	bic.w	r3, r3, #15
 8000f9e:	430b      	orrs	r3, r1
 8000fa0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fa2:	6813      	ldr	r3, [r2, #0]
 8000fa4:	f003 030f 	and.w	r3, r3, #15
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d1c2      	bne.n	8000f32 <HAL_RCC_ClockConfig+0xa>
 8000fac:	e7ca      	b.n	8000f44 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fae:	f011 0f04 	tst.w	r1, #4
 8000fb2:	4b29      	ldr	r3, [pc, #164]	; (8001058 <HAL_RCC_ClockConfig+0x130>)
 8000fb4:	d003      	beq.n	8000fbe <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8000fbc:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fbe:	070e      	lsls	r6, r1, #28
 8000fc0:	d503      	bpl.n	8000fca <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8000fc8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	68a0      	ldr	r0, [r4, #8]
 8000fce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000fd2:	4302      	orrs	r2, r0
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	e7b8      	b.n	8000f4a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fd8:	6861      	ldr	r1, [r4, #4]
 8000fda:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <HAL_RCC_ClockConfig+0x130>)
 8000fdc:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fde:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fe0:	d11c      	bne.n	800101c <HAL_RCC_ClockConfig+0xf4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe6:	d0a4      	beq.n	8000f32 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fe8:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fea:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fee:	4e1a      	ldr	r6, [pc, #104]	; (8001058 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ff0:	f022 0203 	bic.w	r2, r2, #3
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000ff8:	f7ff faca 	bl	8000590 <HAL_GetTick>
 8000ffc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ffe:	68b3      	ldr	r3, [r6, #8]
 8001000:	6862      	ldr	r2, [r4, #4]
 8001002:	f003 030c 	and.w	r3, r3, #12
 8001006:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800100a:	d0a0      	beq.n	8000f4e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800100c:	f7ff fac0 	bl	8000590 <HAL_GetTick>
 8001010:	1bc0      	subs	r0, r0, r7
 8001012:	4540      	cmp	r0, r8
 8001014:	d9f3      	bls.n	8000ffe <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8001016:	2003      	movs	r0, #3
}
 8001018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800101c:	2902      	cmp	r1, #2
 800101e:	d102      	bne.n	8001026 <HAL_RCC_ClockConfig+0xfe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001020:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001024:	e7df      	b.n	8000fe6 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001026:	f012 0f02 	tst.w	r2, #2
 800102a:	e7dc      	b.n	8000fe6 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800102c:	6813      	ldr	r3, [r2, #0]
 800102e:	f023 030f 	bic.w	r3, r3, #15
 8001032:	432b      	orrs	r3, r5
 8001034:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001036:	6813      	ldr	r3, [r2, #0]
 8001038:	f003 030f 	and.w	r3, r3, #15
 800103c:	429d      	cmp	r5, r3
 800103e:	f47f af78 	bne.w	8000f32 <HAL_RCC_ClockConfig+0xa>
 8001042:	e78a      	b.n	8000f5a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001044:	4904      	ldr	r1, [pc, #16]	; (8001058 <HAL_RCC_ClockConfig+0x130>)
 8001046:	68e0      	ldr	r0, [r4, #12]
 8001048:	688b      	ldr	r3, [r1, #8]
 800104a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800104e:	4303      	orrs	r3, r0
 8001050:	608b      	str	r3, [r1, #8]
 8001052:	e785      	b.n	8000f60 <HAL_RCC_ClockConfig+0x38>
 8001054:	40023c00 	.word	0x40023c00
 8001058:	40023800 	.word	0x40023800
 800105c:	08001e1c 	.word	0x08001e1c
 8001060:	2003fc0c 	.word	0x2003fc0c
 8001064:	20000004 	.word	0x20000004

08001068 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001068:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800106c:	6802      	ldr	r2, [r0, #0]
{
 800106e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001070:	f012 0601 	ands.w	r6, r2, #1
 8001074:	d00b      	beq.n	800108e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001076:	4bb8      	ldr	r3, [pc, #736]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001078:	6899      	ldr	r1, [r3, #8]
 800107a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800107e:	6099      	str	r1, [r3, #8]
 8001080:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001082:	6899      	ldr	r1, [r3, #8]
 8001084:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001086:	fab6 f686 	clz	r6, r6
 800108a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800108c:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800108e:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8001092:	d012      	beq.n	80010ba <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001094:	49b0      	ldr	r1, [pc, #704]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001096:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001098:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800109c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80010a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 80010a4:	bf08      	it	eq
 80010a6:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80010a8:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80010ac:	bf16      	itet	ne
 80010ae:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80010b2:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80010b4:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80010b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80010ba:	02d1      	lsls	r1, r2, #11
 80010bc:	d510      	bpl.n	80010e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80010be:	48a6      	ldr	r0, [pc, #664]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80010c0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80010c2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80010c6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80010ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80010ce:	ea43 0301 	orr.w	r3, r3, r1
 80010d2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80010d6:	f000 8185 	beq.w	80013e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80010da:	2900      	cmp	r1, #0
 80010dc:	bf08      	it	eq
 80010de:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80010e0:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 80010e4:	bf18      	it	ne
 80010e6:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80010e8:	0692      	lsls	r2, r2, #26
 80010ea:	d531      	bpl.n	8001150 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80010ec:	4b9a      	ldr	r3, [pc, #616]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80010ee:	4f9b      	ldr	r7, [pc, #620]	; (800135c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80010f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010f6:	641a      	str	r2, [r3, #64]	; 0x40
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001108:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800110a:	f7ff fa41 	bl	8000590 <HAL_GetTick>
 800110e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	05db      	lsls	r3, r3, #23
 8001114:	f140 8168 	bpl.w	80013e8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001118:	4f8f      	ldr	r7, [pc, #572]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800111a:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800111c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001120:	f040 816d 	bne.w	80013fe <HAL_RCCEx_PeriphCLKConfig+0x396>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001124:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001126:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800112a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800112e:	4a8a      	ldr	r2, [pc, #552]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001130:	f040 818b 	bne.w	800144a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8001134:	6891      	ldr	r1, [r2, #8]
 8001136:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800113a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800113e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001142:	4301      	orrs	r1, r0
 8001144:	6091      	str	r1, [r2, #8]
 8001146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800114a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800114c:	430b      	orrs	r3, r1
 800114e:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001150:	6823      	ldr	r3, [r4, #0]
 8001152:	06da      	lsls	r2, r3, #27
 8001154:	d50c      	bpl.n	8001170 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001156:	4a80      	ldr	r2, [pc, #512]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001158:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800115c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001160:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001164:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001168:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800116a:	4301      	orrs	r1, r0
 800116c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001170:	045f      	lsls	r7, r3, #17
 8001172:	d508      	bpl.n	8001186 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001174:	4978      	ldr	r1, [pc, #480]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001176:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001178:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800117c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001180:	4302      	orrs	r2, r0
 8001182:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001186:	0418      	lsls	r0, r3, #16
 8001188:	d508      	bpl.n	800119c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800118a:	4973      	ldr	r1, [pc, #460]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800118c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800118e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001192:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001196:	4302      	orrs	r2, r0
 8001198:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800119c:	03d9      	lsls	r1, r3, #15
 800119e:	d508      	bpl.n	80011b2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80011a0:	496d      	ldr	r1, [pc, #436]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80011a2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80011a4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80011a8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80011ac:	4302      	orrs	r2, r0
 80011ae:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80011b2:	039a      	lsls	r2, r3, #14
 80011b4:	d508      	bpl.n	80011c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80011b6:	4968      	ldr	r1, [pc, #416]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80011b8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80011ba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80011be:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80011c2:	4302      	orrs	r2, r0
 80011c4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80011c8:	065f      	lsls	r7, r3, #25
 80011ca:	d508      	bpl.n	80011de <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80011cc:	4962      	ldr	r1, [pc, #392]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80011ce:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80011d0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80011d4:	f022 0203 	bic.w	r2, r2, #3
 80011d8:	4302      	orrs	r2, r0
 80011da:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80011de:	0618      	lsls	r0, r3, #24
 80011e0:	d508      	bpl.n	80011f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80011e2:	495d      	ldr	r1, [pc, #372]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80011e4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80011e6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80011ea:	f022 020c 	bic.w	r2, r2, #12
 80011ee:	4302      	orrs	r2, r0
 80011f0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80011f4:	05d9      	lsls	r1, r3, #23
 80011f6:	d508      	bpl.n	800120a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80011f8:	4957      	ldr	r1, [pc, #348]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80011fa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80011fc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001200:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001204:	4302      	orrs	r2, r0
 8001206:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800120a:	059a      	lsls	r2, r3, #22
 800120c:	d508      	bpl.n	8001220 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800120e:	4952      	ldr	r1, [pc, #328]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001210:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001212:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001216:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800121a:	4302      	orrs	r2, r0
 800121c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001220:	055f      	lsls	r7, r3, #21
 8001222:	d508      	bpl.n	8001236 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001224:	494c      	ldr	r1, [pc, #304]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001226:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001228:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800122c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001230:	4302      	orrs	r2, r0
 8001232:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001236:	0518      	lsls	r0, r3, #20
 8001238:	d508      	bpl.n	800124c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800123a:	4947      	ldr	r1, [pc, #284]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800123c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800123e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001242:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001246:	4302      	orrs	r2, r0
 8001248:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800124c:	04d9      	lsls	r1, r3, #19
 800124e:	d508      	bpl.n	8001262 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001250:	4941      	ldr	r1, [pc, #260]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001252:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001254:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001258:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800125c:	4302      	orrs	r2, r0
 800125e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001262:	049a      	lsls	r2, r3, #18
 8001264:	d508      	bpl.n	8001278 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001266:	493c      	ldr	r1, [pc, #240]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001268:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800126a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800126e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001272:	4302      	orrs	r2, r0
 8001274:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001278:	025f      	lsls	r7, r3, #9
 800127a:	d508      	bpl.n	800128e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800127c:	4936      	ldr	r1, [pc, #216]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800127e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001280:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001284:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001288:	4302      	orrs	r2, r0
 800128a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800128e:	0298      	lsls	r0, r3, #10
 8001290:	d50c      	bpl.n	80012ac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001292:	4831      	ldr	r0, [pc, #196]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001294:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001296:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800129a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800129e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80012a2:	bf08      	it	eq
 80012a4:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80012a6:	430a      	orrs	r2, r1
 80012a8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80012ac:	f013 0f08 	tst.w	r3, #8
 80012b0:	bf18      	it	ne
 80012b2:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80012b4:	0359      	lsls	r1, r3, #13
 80012b6:	d508      	bpl.n	80012ca <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80012b8:	4927      	ldr	r1, [pc, #156]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80012ba:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80012bc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80012c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80012c4:	4302      	orrs	r2, r0
 80012c6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80012ca:	021a      	lsls	r2, r3, #8
 80012cc:	d509      	bpl.n	80012e2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80012ce:	4922      	ldr	r1, [pc, #136]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80012d0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80012d4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80012d8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80012dc:	4302      	orrs	r2, r0
 80012de:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80012e2:	2e01      	cmp	r6, #1
 80012e4:	f000 80b5 	beq.w	8001452 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80012e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80012ec:	f000 80b1 	beq.w	8001452 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80012f0:	2d01      	cmp	r5, #1
 80012f2:	d175      	bne.n	80013e0 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80012f4:	4d18      	ldr	r5, [pc, #96]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80012f6:	682b      	ldr	r3, [r5, #0]
 80012f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012fc:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80012fe:	f7ff f947 	bl	8000590 <HAL_GetTick>
 8001302:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001304:	682b      	ldr	r3, [r5, #0]
 8001306:	009f      	lsls	r7, r3, #2
 8001308:	f100 8127 	bmi.w	800155a <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800130c:	6821      	ldr	r1, [r4, #0]
 800130e:	030e      	lsls	r6, r1, #12
 8001310:	d501      	bpl.n	8001316 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8001312:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001314:	b11b      	cbz	r3, 800131e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8001316:	02cd      	lsls	r5, r1, #11
 8001318:	d522      	bpl.n	8001360 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800131a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800131c:	bb03      	cbnz	r3, 8001360 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800131e:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001320:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001324:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001328:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800132c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001330:	4303      	orrs	r3, r0
 8001332:	6960      	ldr	r0, [r4, #20]
 8001334:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001338:	69a0      	ldr	r0, [r4, #24]
 800133a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800133e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001342:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001346:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001348:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800134c:	3801      	subs	r0, #1
 800134e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001352:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001356:	e003      	b.n	8001360 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8001358:	40023800 	.word	0x40023800
 800135c:	40007000 	.word	0x40007000
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001360:	0288      	lsls	r0, r1, #10
 8001362:	d515      	bpl.n	8001390 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8001364:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001366:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800136a:	d111      	bne.n	8001390 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800136c:	4a82      	ldr	r2, [pc, #520]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800136e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001372:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001376:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800137a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800137e:	4303      	orrs	r3, r0
 8001380:	6960      	ldr	r0, [r4, #20]
 8001382:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001386:	6a20      	ldr	r0, [r4, #32]
 8001388:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800138c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001390:	070a      	lsls	r2, r1, #28
 8001392:	d519      	bpl.n	80013c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001394:	4978      	ldr	r1, [pc, #480]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001396:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800139a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800139e:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80013a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a6:	4313      	orrs	r3, r2
 80013a8:	6962      	ldr	r2, [r4, #20]
 80013aa:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80013ae:	69e2      	ldr	r2, [r4, #28]
 80013b0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80013b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80013b8:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80013bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80013c2:	4313      	orrs	r3, r2
 80013c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80013c8:	4c6b      	ldr	r4, [pc, #428]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013d2:	f7ff f8dd 	bl	8000590 <HAL_GetTick>
 80013d6:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80013d8:	6823      	ldr	r3, [r4, #0]
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	f140 80c4 	bpl.w	8001568 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80013e0:	2000      	movs	r0, #0
 80013e2:	e009      	b.n	80013f8 <HAL_RCCEx_PeriphCLKConfig+0x390>
      plli2sused = 1;
 80013e4:	2601      	movs	r6, #1
 80013e6:	e67b      	b.n	80010e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e8:	f7ff f8d2 	bl	8000590 <HAL_GetTick>
 80013ec:	eba0 0008 	sub.w	r0, r0, r8
 80013f0:	2864      	cmp	r0, #100	; 0x64
 80013f2:	f67f ae8d 	bls.w	8001110 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80013f6:	2003      	movs	r0, #3
}
 80013f8:	b003      	add	sp, #12
 80013fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80013fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001400:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001404:	4293      	cmp	r3, r2
 8001406:	f43f ae8d 	beq.w	8001124 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800140a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800140c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800140e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001412:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001416:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001418:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800141a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800141e:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001420:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001424:	07d8      	lsls	r0, r3, #31
 8001426:	f57f ae7d 	bpl.w	8001124 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800142a:	f7ff f8b1 	bl	8000590 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001432:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001434:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001436:	0799      	lsls	r1, r3, #30
 8001438:	f53f ae74 	bmi.w	8001124 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800143c:	f7ff f8a8 	bl	8000590 <HAL_GetTick>
 8001440:	eba0 0008 	sub.w	r0, r0, r8
 8001444:	4548      	cmp	r0, r9
 8001446:	d9f5      	bls.n	8001434 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8001448:	e7d5      	b.n	80013f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800144a:	6891      	ldr	r1, [r2, #8]
 800144c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001450:	e678      	b.n	8001144 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001452:	4e49      	ldr	r6, [pc, #292]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001454:	6833      	ldr	r3, [r6, #0]
 8001456:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800145a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800145c:	f7ff f898 	bl	8000590 <HAL_GetTick>
 8001460:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001462:	6833      	ldr	r3, [r6, #0]
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	d472      	bmi.n	800154e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001468:	6822      	ldr	r2, [r4, #0]
 800146a:	07d7      	lsls	r7, r2, #31
 800146c:	d512      	bpl.n	8001494 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800146e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001470:	b983      	cbnz	r3, 8001494 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001472:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001476:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800147a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800147e:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001482:	430b      	orrs	r3, r1
 8001484:	6861      	ldr	r1, [r4, #4]
 8001486:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800148a:	68a1      	ldr	r1, [r4, #8]
 800148c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001490:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001494:	0316      	lsls	r6, r2, #12
 8001496:	d503      	bpl.n	80014a0 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8001498:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800149a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800149e:	d005      	beq.n	80014ac <HAL_RCCEx_PeriphCLKConfig+0x444>
 80014a0:	02d0      	lsls	r0, r2, #11
 80014a2:	d51e      	bpl.n	80014e2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80014a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014aa:	d11a      	bne.n	80014e2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80014ac:	4932      	ldr	r1, [pc, #200]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80014ae:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80014b2:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80014b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014ba:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80014be:	4303      	orrs	r3, r0
 80014c0:	6860      	ldr	r0, [r4, #4]
 80014c2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80014c6:	68e0      	ldr	r0, [r4, #12]
 80014c8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80014cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80014d0:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80014d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014d6:	f020 001f 	bic.w	r0, r0, #31
 80014da:	3b01      	subs	r3, #1
 80014dc:	4303      	orrs	r3, r0
 80014de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80014e2:	01d1      	lsls	r1, r2, #7
 80014e4:	d511      	bpl.n	800150a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80014e6:	4924      	ldr	r1, [pc, #144]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80014e8:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80014ec:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80014f0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80014f4:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80014f8:	4303      	orrs	r3, r0
 80014fa:	6860      	ldr	r0, [r4, #4]
 80014fc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001500:	6920      	ldr	r0, [r4, #16]
 8001502:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001506:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800150a:	0192      	lsls	r2, r2, #6
 800150c:	d50d      	bpl.n	800152a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800150e:	6923      	ldr	r3, [r4, #16]
 8001510:	6862      	ldr	r2, [r4, #4]
 8001512:	041b      	lsls	r3, r3, #16
 8001514:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001518:	68e2      	ldr	r2, [r4, #12]
 800151a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800151e:	68a2      	ldr	r2, [r4, #8]
 8001520:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001524:	4a14      	ldr	r2, [pc, #80]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001526:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800152a:	4e13      	ldr	r6, [pc, #76]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800152c:	6833      	ldr	r3, [r6, #0]
 800152e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001532:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001534:	f7ff f82c 	bl	8000590 <HAL_GetTick>
 8001538:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800153a:	6833      	ldr	r3, [r6, #0]
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	f53f aed7 	bmi.w	80012f0 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001542:	f7ff f825 	bl	8000590 <HAL_GetTick>
 8001546:	1bc0      	subs	r0, r0, r7
 8001548:	2864      	cmp	r0, #100	; 0x64
 800154a:	d9f6      	bls.n	800153a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800154c:	e753      	b.n	80013f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800154e:	f7ff f81f 	bl	8000590 <HAL_GetTick>
 8001552:	1bc0      	subs	r0, r0, r7
 8001554:	2864      	cmp	r0, #100	; 0x64
 8001556:	d984      	bls.n	8001462 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8001558:	e74d      	b.n	80013f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800155a:	f7ff f819 	bl	8000590 <HAL_GetTick>
 800155e:	1b80      	subs	r0, r0, r6
 8001560:	2864      	cmp	r0, #100	; 0x64
 8001562:	f67f aecf 	bls.w	8001304 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8001566:	e746      	b.n	80013f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001568:	f7ff f812 	bl	8000590 <HAL_GetTick>
 800156c:	1b40      	subs	r0, r0, r5
 800156e:	2864      	cmp	r0, #100	; 0x64
 8001570:	f67f af32 	bls.w	80013d8 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8001574:	e73f      	b.n	80013f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800

0800157c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800157c:	b538      	push	{r3, r4, r5, lr}
 800157e:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8001580:	4604      	mov	r4, r0
 8001582:	b1c8      	cbz	r0, 80015b8 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8001584:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001588:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800158c:	b91b      	cbnz	r3, 8001596 <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800158e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8001592:	f000 fb5d 	bl	8001c50 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001596:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8001598:	1d21      	adds	r1, r4, #4
 800159a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800159c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80015a0:	f000 f823 	bl	80015ea <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80015a4:	6862      	ldr	r2, [r4, #4]
 80015a6:	4629      	mov	r1, r5
 80015a8:	6820      	ldr	r0, [r4, #0]
 80015aa:	f000 f85d 	bl	8001668 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80015ae:	2301      	movs	r3, #1
  
  return HAL_OK;
 80015b0:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 80015b2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80015b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80015b8:	2001      	movs	r0, #1
}
 80015ba:	bd38      	pop	{r3, r4, r5, pc}

080015bc <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80015bc:	b538      	push	{r3, r4, r5, lr}
 80015be:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80015c0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
 80015c4:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80015c6:	b2c0      	uxtb	r0, r0
 80015c8:	2802      	cmp	r0, #2
 80015ca:	d00d      	beq.n	80015e8 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80015cc:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80015ce:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80015d0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80015d4:	f000 f890 	bl	80016f8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80015d8:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 80015da:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80015dc:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80015de:	bf0c      	ite	eq
 80015e0:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 80015e2:	2301      	movne	r3, #1
 80015e4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80015e8:	bd38      	pop	{r3, r4, r5, pc}

080015ea <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80015ea:	680b      	ldr	r3, [r1, #0]
 80015ec:	684a      	ldr	r2, [r1, #4]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	f8d1 c010 	ldr.w	ip, [r1, #16]
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80015f4:	6803      	ldr	r3, [r0, #0]
{
 80015f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015fa:	f8d1 9008 	ldr.w	r9, [r1, #8]
 80015fe:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8001602:	694d      	ldr	r5, [r1, #20]
 8001604:	698c      	ldr	r4, [r1, #24]
 8001606:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 800160a:	6a0f      	ldr	r7, [r1, #32]
 800160c:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800160e:	d014      	beq.n	800163a <FMC_SDRAM_Init+0x50>
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8001610:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001614:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001618:	431a      	orrs	r2, r3
 800161a:	ea42 0209 	orr.w	r2, r2, r9
 800161e:	ea42 0208 	orr.w	r2, r2, r8
 8001622:	ea42 030c 	orr.w	r3, r2, ip
 8001626:	432b      	orrs	r3, r5
 8001628:	4323      	orrs	r3, r4
 800162a:	ea43 030e 	orr.w	r3, r3, lr
 800162e:	433b      	orrs	r3, r7
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8001630:	4333      	orrs	r3, r6
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8001632:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8001634:	2000      	movs	r0, #0
 8001636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800163a:	6841      	ldr	r1, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800163c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8001640:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8001644:	ea43 030e 	orr.w	r3, r3, lr
 8001648:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800164c:	433b      	orrs	r3, r7
 800164e:	430a      	orrs	r2, r1
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8001650:	431e      	orrs	r6, r3
 8001652:	ea42 0209 	orr.w	r2, r2, r9
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8001656:	6006      	str	r6, [r0, #0]
 8001658:	ea42 0208 	orr.w	r2, r2, r8
 800165c:	ea42 030c 	orr.w	r3, r2, ip
 8001660:	432b      	orrs	r3, r5
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8001662:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8001664:	6043      	str	r3, [r0, #4]
 8001666:	e7e5      	b.n	8001634 <FMC_SDRAM_Init+0x4a>

08001668 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8001668:	2a01      	cmp	r2, #1
 800166a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
{
 800166e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001670:	e891 4008 	ldmia.w	r1, {r3, lr}
 8001674:	688f      	ldr	r7, [r1, #8]
 8001676:	690d      	ldr	r5, [r1, #16]
 8001678:	694e      	ldr	r6, [r1, #20]
 800167a:	6989      	ldr	r1, [r1, #24]
  if (Bank != FMC_SDRAM_BANK2) 
 800167c:	d01b      	beq.n	80016b6 <FMC_SDRAM_Timing_Init+0x4e>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800167e:	6882      	ldr	r2, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8001680:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8001684:	3b01      	subs	r3, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8001686:	f10c 3cff 	add.w	ip, ip, #4294967295
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800168a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800168e:	3d01      	subs	r5, #1
                       (((Timing->RPDelay)-1) << 20)             |\
 8001690:	3e01      	subs	r6, #1
                       (((Timing->RCDDelay)-1) << 24));
 8001692:	3901      	subs	r1, #1
 8001694:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 8001698:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800169a:	1e7b      	subs	r3, r7, #1
 800169c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80016a0:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 80016a4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80016a8:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80016ac:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80016b0:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 80016b2:	2000      	movs	r0, #0
 80016b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80016b6:	6884      	ldr	r4, [r0, #8]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80016b8:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80016bc:	68c2      	ldr	r2, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80016be:	3b01      	subs	r3, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80016c0:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80016c4:	f10c 3cff 	add.w	ip, ip, #4294967295
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80016c8:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                        (((Timing->RPDelay)-1) << 20)); 
 80016cc:	3e01      	subs	r6, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80016ce:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
                       (((Timing->RCDDelay)-1) << 24));   
 80016d2:	3901      	subs	r1, #1
 80016d4:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 80016d8:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
 80016dc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80016de:	1e7b      	subs	r3, r7, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80016e0:	ea44 5606 	orr.w	r6, r4, r6, lsl #20
 80016e4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80016e8:	1e6b      	subs	r3, r5, #1
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80016ea:	6086      	str	r6, [r0, #8]
 80016ec:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80016f0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80016f4:	60c3      	str	r3, [r0, #12]
 80016f6:	e7dc      	b.n	80016b2 <FMC_SDRAM_Timing_Init+0x4a>

080016f8 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80016f8:	e891 000c 	ldmia.w	r1, {r2, r3}
{
 80016fc:	b513      	push	{r0, r1, r4, lr}
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80016fe:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
 8001700:	68ca      	ldr	r2, [r1, #12]
{
 8001702:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 8001704:	2000      	movs	r0, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8001706:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800170a:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t tmpr = 0;
 800170c:	9001      	str	r0, [sp, #4]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800170e:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8001710:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8001714:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8001716:	9b01      	ldr	r3, [sp, #4]
 8001718:	6123      	str	r3, [r4, #16]
  
  return HAL_OK;  
}
 800171a:	b002      	add	sp, #8
 800171c:	bd10      	pop	{r4, pc}
	...

08001720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001722:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001724:	2230      	movs	r2, #48	; 0x30
 8001726:	2100      	movs	r1, #0
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001728:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172a:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800172c:	2500      	movs	r5, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172e:	f000 fb61 	bl	8001df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001732:	2214      	movs	r2, #20
 8001734:	2100      	movs	r1, #0
 8001736:	a802      	add	r0, sp, #8
 8001738:	f000 fb5c 	bl	8001df4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800173c:	2100      	movs	r1, #0
 800173e:	2284      	movs	r2, #132	; 0x84
 8001740:	a813      	add	r0, sp, #76	; 0x4c
 8001742:	f000 fb57 	bl	8001df4 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <SystemClock_Config+0xb0>)
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001748:	2708      	movs	r7, #8
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800174a:	2601      	movs	r6, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800174c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800174e:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8001750:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001754:	641a      	str	r2, [r3, #64]	; 0x40
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <SystemClock_Config+0xb4>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800176c:	9407      	str	r4, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800176e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001772:	960a      	str	r6, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001774:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800177a:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800177c:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800177e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001780:	23d8      	movs	r3, #216	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001782:	970f      	str	r7, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001784:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001786:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001788:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178a:	f7ff f9e3 	bl	8000b54 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800178e:	f7ff f9a9 	bl	8000ae4 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001792:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001794:	2107      	movs	r1, #7
 8001796:	eb0d 0007 	add.w	r0, sp, r7
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800179a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800179c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a0:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017a2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a8:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017aa:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80017ac:	f7ff fbbc 	bl	8000f28 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 80017b0:	2360      	movs	r3, #96	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
  PeriphClkInitStruct.PLLSAIDivQ = 1;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b2:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80017b4:	9713      	str	r7, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 80017b6:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80017b8:	2305      	movs	r3, #5
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80017ba:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80017bc:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80017be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80017c2:	951b      	str	r5, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80017c4:	961d      	str	r6, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80017c6:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017c8:	f7ff fc4e 	bl	8001068 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80017cc:	b035      	add	sp, #212	; 0xd4
 80017ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40007000 	.word	0x40007000

080017d8 <main>:
{
 80017d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017dc:	b09b      	sub	sp, #108	; 0x6c
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PK3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2400      	movs	r4, #0
  HAL_Init();
 80017e0:	f7fe febe 	bl	8000560 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e4:	2701      	movs	r7, #1
  SystemClock_Config();
 80017e6:	f7ff ff9b 	bl	8001720 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ea:	2214      	movs	r2, #20
 80017ec:	2100      	movs	r1, #0
 80017ee:	a80d      	add	r0, sp, #52	; 0x34
 80017f0:	f000 fb00 	bl	8001df4 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f4:	4bb9      	ldr	r3, [pc, #740]	; (8001adc <main+0x304>)
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_RESET);
 80017f6:	2108      	movs	r1, #8
 80017f8:	48b9      	ldr	r0, [pc, #740]	; (8001ae0 <main+0x308>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017fc:	f04f 0a08 	mov.w	sl, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);

  /*Configure GPIO pin : PI12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001800:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001804:	f44f 6900 	mov.w	r9, #2048	; 0x800
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	f042 0201 	orr.w	r2, r2, #1
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800180c:	4eb5      	ldr	r6, [pc, #724]	; (8001ae4 <main+0x30c>)
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800180e:	f04f 0810 	mov.w	r8, #16
  SdramTiming.WriteRecoveryTime = 3;
 8001812:	f04f 0b03 	mov.w	fp, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	631a      	str	r2, [r3, #48]	; 0x30
 8001818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800181a:	f002 0201 	and.w	r2, r2, #1
 800181e:	9203      	str	r2, [sp, #12]
 8001820:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001828:	631a      	str	r2, [r3, #48]	; 0x30
 800182a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800182c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001830:	9204      	str	r2, [sp, #16]
 8001832:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001836:	f042 0208 	orr.w	r2, r2, #8
 800183a:	631a      	str	r2, [r3, #48]	; 0x30
 800183c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800183e:	f002 0208 	and.w	r2, r2, #8
 8001842:	9205      	str	r2, [sp, #20]
 8001844:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001848:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800184c:	631a      	str	r2, [r3, #48]	; 0x30
 800184e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001850:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001854:	9206      	str	r2, [sp, #24]
 8001856:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800185a:	f042 0220 	orr.w	r2, r2, #32
 800185e:	631a      	str	r2, [r3, #48]	; 0x30
 8001860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001862:	f002 0220 	and.w	r2, r2, #32
 8001866:	9207      	str	r2, [sp, #28]
 8001868:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800186a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800186c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001870:	631a      	str	r2, [r3, #48]	; 0x30
 8001872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001874:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001878:	9208      	str	r2, [sp, #32]
 800187a:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800187c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800187e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001882:	631a      	str	r2, [r3, #48]	; 0x30
 8001884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001886:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800188a:	9209      	str	r2, [sp, #36]	; 0x24
 800188c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800188e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001890:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001894:	631a      	str	r2, [r3, #48]	; 0x30
 8001896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001898:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800189c:	920a      	str	r2, [sp, #40]	; 0x28
 800189e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018a2:	f042 0204 	orr.w	r2, r2, #4
 80018a6:	631a      	str	r2, [r3, #48]	; 0x30
 80018a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018aa:	f002 0204 	and.w	r2, r2, #4
 80018ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80018b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018b4:	f042 0210 	orr.w	r2, r2, #16
 80018b8:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	930c      	str	r3, [sp, #48]	; 0x30
 80018c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_RESET);
 80018c6:	f7fe ffcb 	bl	8000860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018d0:	4885      	ldr	r0, [pc, #532]	; (8001ae8 <main+0x310>)
 80018d2:	f7fe ffc5 	bl	8000860 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80018d6:	a90d      	add	r1, sp, #52	; 0x34
 80018d8:	4881      	ldr	r0, [pc, #516]	; (8001ae0 <main+0x308>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018de:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e2:	970e      	str	r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80018e4:	f7fe fecc 	bl	8000680 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018e8:	a90d      	add	r1, sp, #52	; 0x34
 80018ea:	487f      	ldr	r0, [pc, #508]	; (8001ae8 <main+0x310>)
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018ec:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	970e      	str	r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018f4:	f7fe fec4 	bl	8000680 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018f8:	a90d      	add	r1, sp, #52	; 0x34
 80018fa:	487b      	ldr	r0, [pc, #492]	; (8001ae8 <main+0x310>)
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80018fc:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001900:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001904:	f7fe febc 	bl	8000680 <HAL_GPIO_Init>
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001908:	4621      	mov	r1, r4
 800190a:	221c      	movs	r2, #28
 800190c:	a80d      	add	r0, sp, #52	; 0x34
 800190e:	f000 fa71 	bl	8001df4 <memset>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001912:	4b76      	ldr	r3, [pc, #472]	; (8001aec <main+0x314>)
  SdramTiming.RowCycleDelay = 7;
 8001914:	2207      	movs	r2, #7
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001916:	f8c6 9020 	str.w	r9, [r6, #32]
  SdramTiming.LoadToActiveDelay = 2;
 800191a:	f04f 0902 	mov.w	r9, #2
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800191e:	a90d      	add	r1, sp, #52	; 0x34
 8001920:	4630      	mov	r0, r6
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001922:	60b4      	str	r4, [r6, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001924:	61f4      	str	r4, [r6, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001926:	6275      	str	r5, [r6, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001928:	62b4      	str	r4, [r6, #40]	; 0x28
  SdramTiming.RowCycleDelay = 7;
 800192a:	9210      	str	r2, [sp, #64]	; 0x40
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800192c:	f8c6 8010 	str.w	r8, [r6, #16]
  SdramTiming.LoadToActiveDelay = 2;
 8001930:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  SdramTiming.ExitSelfRefreshDelay = 8;
 8001934:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  SdramTiming.WriteRecoveryTime = 3;
 8001938:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  SdramTiming.RPDelay = 2;
 800193c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  SdramTiming.RCDDelay = 2;
 8001940:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  hltdc.Instance = LTDC;
 8001944:	4d6a      	ldr	r5, [pc, #424]	; (8001af0 <main+0x318>)
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001946:	e886 0018 	stmia.w	r6, {r3, r4}
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800194a:	2304      	movs	r3, #4
 800194c:	60f3      	str	r3, [r6, #12]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800194e:	2340      	movs	r3, #64	; 0x40
 8001950:	6173      	str	r3, [r6, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001952:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001956:	61b3      	str	r3, [r6, #24]
  SdramTiming.SelfRefreshTime = 5;
 8001958:	2305      	movs	r3, #5
 800195a:	930f      	str	r3, [sp, #60]	; 0x3c
 800195c:	9301      	str	r3, [sp, #4]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800195e:	f7ff fe0d 	bl	800157c <HAL_SDRAM_Init>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001962:	2234      	movs	r2, #52	; 0x34
 8001964:	4621      	mov	r1, r4
 8001966:	eb0d 0002 	add.w	r0, sp, r2
 800196a:	f000 fa43 	bl	8001df4 <memset>
  hltdc.Instance = LTDC;
 800196e:	4a61      	ldr	r2, [pc, #388]	; (8001af4 <main+0x31c>)
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001970:	4628      	mov	r0, r5
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001972:	60ac      	str	r4, [r5, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001974:	60ec      	str	r4, [r5, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001976:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Blue = 0;
 8001978:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800197c:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001980:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001984:	e885 0014 	stmia.w	r5, {r2, r4}
  hltdc.Init.HorizontalSync = 40;
 8001988:	2228      	movs	r2, #40	; 0x28
 800198a:	616a      	str	r2, [r5, #20]
  hltdc.Init.VerticalSync = 9;
 800198c:	2209      	movs	r2, #9
 800198e:	61aa      	str	r2, [r5, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001990:	2235      	movs	r2, #53	; 0x35
 8001992:	61ea      	str	r2, [r5, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001994:	220b      	movs	r2, #11
 8001996:	622a      	str	r2, [r5, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001998:	f240 2215 	movw	r2, #533	; 0x215
 800199c:	626a      	str	r2, [r5, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800199e:	f240 121b 	movw	r2, #283	; 0x11b
 80019a2:	62aa      	str	r2, [r5, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80019a4:	f240 2235 	movw	r2, #565	; 0x235
 80019a8:	62ea      	str	r2, [r5, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80019aa:	f240 121d 	movw	r2, #285	; 0x11d
 80019ae:	632a      	str	r2, [r5, #48]	; 0x30
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80019b0:	f7fe ffe2 	bl	8000978 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 80019b4:	20ff      	movs	r0, #255	; 0xff
  pLayerCfg.WindowX1 = 480;
 80019b6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  pLayerCfg.WindowY1 = 272;
 80019ba:	f44f 7288 	mov.w	r2, #272	; 0x110
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80019be:	9b01      	ldr	r3, [sp, #4]
  pLayerCfg.Alpha = 255;
 80019c0:	9012      	str	r0, [sp, #72]	; 0x48
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80019c2:	f44f 6080 	mov.w	r0, #1024	; 0x400
  pLayerCfg.WindowX1 = 480;
 80019c6:	910e      	str	r1, [sp, #56]	; 0x38
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80019c8:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80019ca:	4628      	mov	r0, r5
       Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80019cc:	4d4a      	ldr	r5, [pc, #296]	; (8001af8 <main+0x320>)
  pLayerCfg.WindowY1 = 272;
 80019ce:	9210      	str	r2, [sp, #64]	; 0x40
  pLayerCfg.ImageWidth = 480;
 80019d0:	9117      	str	r1, [sp, #92]	; 0x5c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80019d2:	a90d      	add	r1, sp, #52	; 0x34
  pLayerCfg.ImageHeight = 272;
 80019d4:	9218      	str	r2, [sp, #96]	; 0x60
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80019d6:	4622      	mov	r2, r4
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80019d8:	9315      	str	r3, [sp, #84]	; 0x54
  pLayerCfg.WindowX0 = 0;
 80019da:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.WindowY0 = 0;
 80019dc:	940f      	str	r4, [sp, #60]	; 0x3c
  pLayerCfg.Alpha0 = 0;
 80019de:	9413      	str	r4, [sp, #76]	; 0x4c
  pLayerCfg.FBStartAdress = 0;
 80019e0:	9416      	str	r4, [sp, #88]	; 0x58
  pLayerCfg.Backcolor.Blue = 0;
 80019e2:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80019e6:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80019ea:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80019ee:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80019f2:	f7ff f82d 	bl	8000a50 <HAL_LTDC_ConfigLayer>
       HAL_SDRAM_SendCommand(hsdram, Command, 0xFFFF);
 80019f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019fa:	4629      	mov	r1, r5
 80019fc:	4630      	mov	r0, r6
       __IO uint32_t tmpmrd = 0;
 80019fe:	940d      	str	r4, [sp, #52]	; 0x34
       Command->ModeRegisterDefinition = 0;
 8001a00:	60ec      	str	r4, [r5, #12]
       Command->AutoRefreshNumber = 1;
 8001a02:	60af      	str	r7, [r5, #8]
       Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001a04:	e885 0180 	stmia.w	r5, {r7, r8}
       HAL_SDRAM_SendCommand(hsdram, Command, 0xFFFF);
 8001a08:	f7ff fdd8 	bl	80015bc <HAL_SDRAM_SendCommand>
       HAL_Delay(1);
 8001a0c:	4638      	mov	r0, r7
 8001a0e:	f7fe fdc5 	bl	800059c <HAL_Delay>
       HAL_SDRAM_SendCommand(hsdram, Command, 0xFFFF);
 8001a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a16:	4629      	mov	r1, r5
 8001a18:	4630      	mov	r0, r6
       Command->ModeRegisterDefinition = 0;
 8001a1a:	60ec      	str	r4, [r5, #12]
       Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8001a1c:	f8c5 9000 	str.w	r9, [r5]
       Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001a20:	f8c5 8004 	str.w	r8, [r5, #4]
       Command->AutoRefreshNumber = 1;
 8001a24:	60af      	str	r7, [r5, #8]
       HAL_SDRAM_SendCommand(hsdram, Command, 0xFFFF);
 8001a26:	f7ff fdc9 	bl	80015bc <HAL_SDRAM_SendCommand>
       HAL_SDRAM_SendCommand(hsdram, Command, 0xFFFF);
 8001a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a2e:	4629      	mov	r1, r5
 8001a30:	4630      	mov	r0, r6
       Command->ModeRegisterDefinition = 0;
 8001a32:	60ec      	str	r4, [r5, #12]
       Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001a34:	f8c5 b000 	str.w	fp, [r5]
		  *(framebuffer+j+480*i) = RedColor;
 8001a38:	f44f 4478 	mov.w	r4, #63488	; 0xf800
       Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001a3c:	f8c5 8004 	str.w	r8, [r5, #4]
       Command->AutoRefreshNumber = 8;
 8001a40:	f8c5 a008 	str.w	sl, [r5, #8]
       HAL_SDRAM_SendCommand(hsdram, Command, 0xFFFF);
 8001a44:	f7ff fdba 	bl	80015bc <HAL_SDRAM_SendCommand>
       tmpmrd = (uint32_t) 0x00000230;
 8001a48:	f44f 730c 	mov.w	r3, #560	; 0x230
       HAL_SDRAM_SendCommand(hsdram, Command, 0xFFFF);
 8001a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a50:	4629      	mov	r1, r5
 8001a52:	4630      	mov	r0, r6
       tmpmrd = (uint32_t) 0x00000230;
 8001a54:	930d      	str	r3, [sp, #52]	; 0x34
       Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8001a56:	2304      	movs	r3, #4
       Command->AutoRefreshNumber = 1;
 8001a58:	60af      	str	r7, [r5, #8]
       Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001a5a:	e885 0108 	stmia.w	r5, {r3, r8}
       Command->ModeRegisterDefinition = tmpmrd;
 8001a5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001a60:	60eb      	str	r3, [r5, #12]
       HAL_SDRAM_SendCommand(hsdram, Command, 0xFFFF);
 8001a62:	f7ff fdab 	bl	80015bc <HAL_SDRAM_SendCommand>
       hsdram->Instance->SDRTR |= (uint32_t) 1666;
 8001a66:	6832      	ldr	r2, [r6, #0]
 8001a68:	6953      	ldr	r3, [r2, #20]
 8001a6a:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 8001a6e:	ea43 0309 	orr.w	r3, r3, r9
 8001a72:	6153      	str	r3, [r2, #20]
		  *(framebuffer+j+480*i) = RedColor;
 8001a74:	4b21      	ldr	r3, [pc, #132]	; (8001afc <main+0x324>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	f502 30ff 	add.w	r0, r2, #130560	; 0x1fe00
{
 8001a7e:	2100      	movs	r1, #0
		  *(framebuffer+j+480*i) = RedColor;
 8001a80:	f823 4011 	strh.w	r4, [r3, r1, lsl #1]
 8001a84:	3101      	adds	r1, #1
	  for(j=0;j<480;j++){
 8001a86:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 8001a8a:	d1f9      	bne.n	8001a80 <main+0x2a8>
 8001a8c:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
  for(i=0;i<136;i++){
 8001a90:	4283      	cmp	r3, r0
 8001a92:	d1f4      	bne.n	8001a7e <main+0x2a6>
 8001a94:	f502 327f 	add.w	r2, r2, #261120	; 0x3fc00
  		  *(framebuffer+j+480*i) = BlueColor;
 8001a98:	201f      	movs	r0, #31
{
 8001a9a:	2100      	movs	r1, #0
  		  *(framebuffer+j+480*i) = BlueColor;
 8001a9c:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8001aa0:	3101      	adds	r1, #1
  	  for(j=0;j<480;j++){
 8001aa2:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 8001aa6:	d1f9      	bne.n	8001a9c <main+0x2c4>
 8001aa8:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
  for(i=136;i<272;i++){
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d1f4      	bne.n	8001a9a <main+0x2c2>
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	2108      	movs	r1, #8
 8001ab4:	480a      	ldr	r0, [pc, #40]	; (8001ae0 <main+0x308>)
	uint8_t index=0;
 8001ab6:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8001ab8:	f7fe fed2 	bl	8000860 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_11) == 1)
 8001abc:	4e0a      	ldr	r6, [pc, #40]	; (8001ae8 <main+0x310>)
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ac4:	4808      	ldr	r0, [pc, #32]	; (8001ae8 <main+0x310>)
		  HAL_LTDC_SetAddress(&hltdc, SolImage, 0);
 8001ac6:	4f0e      	ldr	r7, [pc, #56]	; (8001b00 <main+0x328>)
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8001ac8:	f7fe feca 	bl	8000860 <HAL_GPIO_WritePin>
		  HAL_LTDC_SetAddress(&hltdc, SolImage, 0);
 8001acc:	4d08      	ldr	r5, [pc, #32]	; (8001af0 <main+0x318>)
  HAL_LTDC_SetAddress(&hltdc, 0xC0000000, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001ad4:	4806      	ldr	r0, [pc, #24]	; (8001af0 <main+0x318>)
 8001ad6:	f7fe ffe4 	bl	8000aa2 <HAL_LTDC_SetAddress>
 8001ada:	e013      	b.n	8001b04 <main+0x32c>
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40022800 	.word	0x40022800
 8001ae4:	2003fcf0 	.word	0x2003fcf0
 8001ae8:	40022000 	.word	0x40022000
 8001aec:	a0000140 	.word	0xa0000140
 8001af0:	2003fc48 	.word	0x2003fc48
 8001af4:	40016800 	.word	0x40016800
 8001af8:	2003fc34 	.word	0x2003fc34
 8001afc:	2003fc08 	.word	0x2003fc08
 8001b00:	20000008 	.word	0x20000008
	  HAL_Delay(500);
 8001b04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b08:	f7fe fd48 	bl	800059c <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_11) == 1)
 8001b0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b10:	4630      	mov	r0, r6
 8001b12:	f7fe fe9f 	bl	8000854 <HAL_GPIO_ReadPin>
 8001b16:	2801      	cmp	r0, #1
 8001b18:	d101      	bne.n	8001b1e <main+0x346>
		  index%=2;
 8001b1a:	f084 0401 	eor.w	r4, r4, #1
	  if(index == 0)
 8001b1e:	b114      	cbz	r4, 8001b26 <main+0x34e>
		  HAL_LTDC_SetAddress(&hltdc, SolImage, 0);
 8001b20:	2200      	movs	r2, #0
 8001b22:	4639      	mov	r1, r7
 8001b24:	e002      	b.n	8001b2c <main+0x354>
		  HAL_LTDC_SetAddress(&hltdc, 0xC0000000, 0);
 8001b26:	4622      	mov	r2, r4
 8001b28:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
		  HAL_LTDC_SetAddress(&hltdc, SolImage, 0);
 8001b2c:	4628      	mov	r0, r5
 8001b2e:	f7fe ffb8 	bl	8000aa2 <HAL_LTDC_SetAddress>
 8001b32:	e7e7      	b.n	8001b04 <main+0x32c>

08001b34 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_MspInit+0x2c>)
{
 8001b36:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b3e:	641a      	str	r2, [r3, #64]	; 0x40
 8001b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b42:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001b46:	9200      	str	r2, [sp, #0]
 8001b48:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b50:	645a      	str	r2, [r3, #68]	; 0x44
 8001b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5c:	b002      	add	sp, #8
 8001b5e:	4770      	bx	lr
 8001b60:	40023800 	.word	0x40023800

08001b64 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001b64:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b66:	2214      	movs	r2, #20
{
 8001b68:	b08a      	sub	sp, #40	; 0x28
 8001b6a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	eb0d 0002 	add.w	r0, sp, r2
 8001b72:	f000 f93f 	bl	8001df4 <memset>
  if(hltdc->Instance==LTDC)
 8001b76:	6822      	ldr	r2, [r4, #0]
 8001b78:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <HAL_LTDC_MspInit+0xd8>)
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d15b      	bne.n	8001c36 <HAL_LTDC_MspInit+0xd2>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b7e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4 
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b84:	260e      	movs	r6, #14
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001b86:	a905      	add	r1, sp, #20
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44

    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001b8c:	482c      	ldr	r0, [pc, #176]	; (8001c40 <HAL_LTDC_MspInit+0xdc>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b8e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b92:	645a      	str	r2, [r3, #68]	; 0x44
 8001b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b96:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001b9a:	9200      	str	r2, [sp, #0]
 8001b9c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ba4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba8:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001bac:	9201      	str	r2, [sp, #4]
 8001bae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bb6:	631a      	str	r2, [r3, #48]	; 0x30
 8001bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bba:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001bbe:	9202      	str	r2, [sp, #8]
 8001bc0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bc8:	631a      	str	r2, [r3, #48]	; 0x30
 8001bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bcc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001bd0:	9203      	str	r2, [sp, #12]
 8001bd2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bda:	631a      	str	r2, [r3, #48]	; 0x30
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001be4:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001be6:	9304      	str	r3, [sp, #16]
 8001be8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4 
 8001bea:	23f7      	movs	r3, #247	; 0xf7
 8001bec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001bee:	f7fe fd47 	bl	8000680 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bf6:	a905      	add	r1, sp, #20
 8001bf8:	4812      	ldr	r0, [pc, #72]	; (8001c44 <HAL_LTDC_MspInit+0xe0>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bfa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001bfc:	2309      	movs	r3, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c00:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c06:	f7fe fd3b 	bl	8000680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_14;
 8001c0a:	f44f 438c 	mov.w	r3, #17920	; 0x4600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c0e:	a905      	add	r1, sp, #20
 8001c10:	480d      	ldr	r0, [pc, #52]	; (8001c48 <HAL_LTDC_MspInit+0xe4>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_14;
 8001c12:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c1a:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c1c:	f7fe fd30 	bl	8000680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9 
 8001c20:	f648 637c 	movw	r3, #36476	; 0x8e7c
                          |GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001c24:	a905      	add	r1, sp, #20
 8001c26:	4809      	ldr	r0, [pc, #36]	; (8001c4c <HAL_LTDC_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9 
 8001c28:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c30:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001c32:	f7fe fd25 	bl	8000680 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001c36:	b00a      	add	sp, #40	; 0x28
 8001c38:	bd70      	pop	{r4, r5, r6, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40016800 	.word	0x40016800
 8001c40:	40022800 	.word	0x40022800
 8001c44:	40021800 	.word	0x40021800
 8001c48:	40022000 	.word	0x40022000
 8001c4c:	40022400 	.word	0x40022400

08001c50 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c52:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001c54:	2214      	movs	r2, #20
 8001c56:	2100      	movs	r1, #0
 8001c58:	a801      	add	r0, sp, #4
 8001c5a:	f000 f8cb 	bl	8001df4 <memset>
  if (FMC_Initialized) {
 8001c5e:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <HAL_SDRAM_MspInit+0xb8>)
 8001c60:	681e      	ldr	r6, [r3, #0]
 8001c62:	2e00      	cmp	r6, #0
 8001c64:	d14d      	bne.n	8001d02 <HAL_SDRAM_MspInit+0xb2>
  FMC_Initialized = 1;
 8001c66:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6a:	2503      	movs	r5, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c6c:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 8001c6e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c70:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c72:	4b26      	ldr	r3, [pc, #152]	; (8001d0c <HAL_SDRAM_MspInit+0xbc>)
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c74:	4826      	ldr	r0, [pc, #152]	; (8001d10 <HAL_SDRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c78:	f042 0201 	orr.w	r2, r2, #1
 8001c7c:	639a      	str	r2, [r3, #56]	; 0x38
 8001c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	9702      	str	r7, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c82:	f003 0301 	and.w	r3, r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c88:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0 
 8001c8e:	f248 1333 	movw	r3, #33075	; 0x8133
 8001c92:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c94:	f7fe fcf4 	bl	8000680 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 8001c98:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c9c:	a901      	add	r1, sp, #4
 8001c9e:	481d      	ldr	r0, [pc, #116]	; (8001d14 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 8001ca0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ca8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001caa:	f7fe fce9 	bl	8000680 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001cae:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cb2:	a901      	add	r1, sp, #4
 8001cb4:	4818      	ldr	r0, [pc, #96]	; (8001d18 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001cb6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbc:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cbe:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cc0:	f7fe fcde 	bl	8000680 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8001cc4:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cc6:	a901      	add	r1, sp, #4
 8001cc8:	4814      	ldr	r0, [pc, #80]	; (8001d1c <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8001cca:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cd2:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cd4:	f7fe fcd4 	bl	8000680 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cd8:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cda:	a901      	add	r1, sp, #4
 8001cdc:	4810      	ldr	r0, [pc, #64]	; (8001d20 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cde:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce4:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ce6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce8:	f7fe fcca 	bl	8000680 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14 
 8001cec:	f64f 7380 	movw	r3, #65408	; 0xff80
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cf0:	a901      	add	r1, sp, #4
 8001cf2:	480c      	ldr	r0, [pc, #48]	; (8001d24 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14 
 8001cf4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cfc:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cfe:	f7fe fcbf 	bl	8000680 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001d02:	b007      	add	sp, #28
 8001d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d06:	bf00      	nop
 8001d08:	2003fc2c 	.word	0x2003fc2c
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40021800 	.word	0x40021800
 8001d14:	40020c00 	.word	0x40020c00
 8001d18:	40021400 	.word	0x40021400
 8001d1c:	40021c00 	.word	0x40021c00
 8001d20:	40020800 	.word	0x40020800
 8001d24:	40021000 	.word	0x40021000

08001d28 <NMI_Handler>:
 8001d28:	4770      	bx	lr

08001d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d2a:	e7fe      	b.n	8001d2a <HardFault_Handler>

08001d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d2c:	e7fe      	b.n	8001d2c <MemManage_Handler>

08001d2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d2e:	e7fe      	b.n	8001d2e <BusFault_Handler>

08001d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d30:	e7fe      	b.n	8001d30 <UsageFault_Handler>

08001d32 <SVC_Handler>:
 8001d32:	4770      	bx	lr

08001d34 <DebugMon_Handler>:
 8001d34:	4770      	bx	lr

08001d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d36:	4770      	bx	lr

08001d38 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d38:	f7fe bc1e 	b.w	8000578 <HAL_IncTick>

08001d3c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <SystemInit+0x18>)
 8001d3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d42:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001d46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d5e:	e003      	b.n	8001d68 <LoopCopyDataInit>

08001d60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d66:	3104      	adds	r1, #4

08001d68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d68:	480b      	ldr	r0, [pc, #44]	; (8001d98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d70:	d3f6      	bcc.n	8001d60 <CopyDataInit>
  ldr  r2, =_sbss
 8001d72:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d74:	e002      	b.n	8001d7c <LoopFillZerobss>

08001d76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d78:	f842 3b04 	str.w	r3, [r2], #4

08001d7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d80:	d3f9      	bcc.n	8001d76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d82:	f7ff ffdb 	bl	8001d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d86:	f000 f811 	bl	8001dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d8a:	f7ff fd25 	bl	80017d8 <main>
  bx  lr    
 8001d8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d90:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001d94:	08001e3c 	.word	0x08001e3c
  ldr  r0, =_sdata
 8001d98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d9c:	2003fc10 	.word	0x2003fc10
  ldr  r2, =_sbss
 8001da0:	2003fc10 	.word	0x2003fc10
  ldr  r3, = _ebss
 8001da4:	2003fd28 	.word	0x2003fd28

08001da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001da8:	e7fe      	b.n	8001da8 <ADC_IRQHandler>
	...

08001dac <__libc_init_array>:
 8001dac:	b570      	push	{r4, r5, r6, lr}
 8001dae:	4e0d      	ldr	r6, [pc, #52]	; (8001de4 <__libc_init_array+0x38>)
 8001db0:	4c0d      	ldr	r4, [pc, #52]	; (8001de8 <__libc_init_array+0x3c>)
 8001db2:	1ba4      	subs	r4, r4, r6
 8001db4:	10a4      	asrs	r4, r4, #2
 8001db6:	2500      	movs	r5, #0
 8001db8:	42a5      	cmp	r5, r4
 8001dba:	d109      	bne.n	8001dd0 <__libc_init_array+0x24>
 8001dbc:	4e0b      	ldr	r6, [pc, #44]	; (8001dec <__libc_init_array+0x40>)
 8001dbe:	4c0c      	ldr	r4, [pc, #48]	; (8001df0 <__libc_init_array+0x44>)
 8001dc0:	f000 f820 	bl	8001e04 <_init>
 8001dc4:	1ba4      	subs	r4, r4, r6
 8001dc6:	10a4      	asrs	r4, r4, #2
 8001dc8:	2500      	movs	r5, #0
 8001dca:	42a5      	cmp	r5, r4
 8001dcc:	d105      	bne.n	8001dda <__libc_init_array+0x2e>
 8001dce:	bd70      	pop	{r4, r5, r6, pc}
 8001dd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dd4:	4798      	blx	r3
 8001dd6:	3501      	adds	r5, #1
 8001dd8:	e7ee      	b.n	8001db8 <__libc_init_array+0xc>
 8001dda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dde:	4798      	blx	r3
 8001de0:	3501      	adds	r5, #1
 8001de2:	e7f2      	b.n	8001dca <__libc_init_array+0x1e>
 8001de4:	08001e34 	.word	0x08001e34
 8001de8:	08001e34 	.word	0x08001e34
 8001dec:	08001e34 	.word	0x08001e34
 8001df0:	08001e38 	.word	0x08001e38

08001df4 <memset>:
 8001df4:	4402      	add	r2, r0
 8001df6:	4603      	mov	r3, r0
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d100      	bne.n	8001dfe <memset+0xa>
 8001dfc:	4770      	bx	lr
 8001dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8001e02:	e7f9      	b.n	8001df8 <memset+0x4>

08001e04 <_init>:
 8001e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e06:	bf00      	nop
 8001e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e0a:	bc08      	pop	{r3}
 8001e0c:	469e      	mov	lr, r3
 8001e0e:	4770      	bx	lr

08001e10 <_fini>:
 8001e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e12:	bf00      	nop
 8001e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e16:	bc08      	pop	{r3}
 8001e18:	469e      	mov	lr, r3
 8001e1a:	4770      	bx	lr
